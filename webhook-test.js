// –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–±—Ö—É–∫–æ–≤
const axios = require('axios');

const WEBHOOK_URL = 'https://your-app.onrender.com'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à URL

async function testWebhooks() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–µ–±—Ö—É–∫–∏...');
    
    try {
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π endpoint
        console.log('\n1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π endpoint...');
        const mainResponse = await axios.get(WEBHOOK_URL);
        console.log('‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π endpoint:', mainResponse.data);

        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º health check
        console.log('\n2. –ü—Ä–æ–≤–µ—Ä—è–µ–º health check...');
        const healthResponse = await axios.get(`${WEBHOOK_URL}/health`);
        console.log('‚úÖ Health check:', healthResponse.data);

        // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É webhook
        console.log('\n3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É webhook...');
        const webhookResponse = await axios.get(`${WEBHOOK_URL}/set-webhook`);
        console.log('‚úÖ Webhook setup:', webhookResponse.data);

        // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º CryptoCloud webhook (mock –¥–∞–Ω–Ω—ã–µ)
        console.log('\n4. –¢–µ—Å—Ç–∏—Ä—É–µ–º CryptoCloud webhook...');
        const mockCryptoData = {
            status: 'success',
            amount: 100,
            currency: 'RUB',
            payload: {
                chatId: 123456789,
                username: 'testuser',
                playerId: 'test123'
            }
        };

        // –í–Ω–∏–º–∞–Ω–∏–µ: —ç—Ç–æ —Ç–µ—Å—Ç —Ç–æ–ª—å–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        console.log('üì¶ Mock CryptoCloud data —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞');

        console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.response?.data || error.message);
        
        if (error.code === 'ECONNREFUSED') {
            console.log('üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞', WEBHOOK_URL);
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
function checkEnvironmentVariables() {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ Render:');
    
    const requiredVars = [
        'TOKEN',
        'MONGO_URI', 
        'CRYPTOCLOUD_API_KEY',
        'CRYPTOCLOUD_SHOP_ID',
        'WEBHOOK_URL'
    ];

    const missingVars = requiredVars.filter(varName => !process.env[varName]);
    
    if (missingVars.length > 0) {
        console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:', missingVars.join(', '));
        console.log('üí° –î–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ Environment Variables –Ω–∞ Render');
        return false;
    } else {
        console.log('‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
        return true;
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–±—Ö—É–∫–æ–≤\n');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if (checkEnvironmentVariables()) {
        testWebhooks();
    }
}

module.exports = { testWebhooks, checkEnvironmentVariables };