// –ü–æ–ª–Ω–∞—è —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è Telegram-–±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –∞–ª–º–∞–∑–æ–≤ MLBB
// –í–µ—Ä—Å–∏—è 2.0 —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π, –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏ –∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é

const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const { MongoClient } = require('mongodb');
const axios = require('axios');

// –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
const { DIAMONDS_DATA_RU, DIAMONDS_DATA_KG, LOYALTY_LEVELS, EMOJIS, LIMITS } = require('./config/constants');
const logger = require('./utils/logger');
const Validators = require('./utils/validators');
const ReferralService = require('./services/referralService');
const PromoService = require('./services/promoService');
const BotHandlers = require('./handlers/botHandlers');

console.log('üîç Checking environment variables:');
console.log('TOKEN exists:', !!process.env.TOKEN);
console.log('MONGO_URI exists:', !!process.env.MONGO_URI);
console.log('CRYPTOCLOUD_API_KEY exists:', !!process.env.CRYPTOCLOUD_API_KEY);
console.log('WEBHOOK_URL:', process.env.WEBHOOK_URL);

const app = express();
app.use(express.json());

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const PORT = process.env.PORT || 3000;
const TOKEN = process.env.TOKEN;
const MONGO_URI = process.env.MONGO_URI;
const CRYPTOCLOUD_API_KEY = process.env.CRYPTOCLOUD_API_KEY;
const CRYPTOCLOUD_SHOP_ID = process.env.CRYPTOCLOUD_SHOP_ID;
const WEBHOOK_URL = process.env.WEBHOOK_URL;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if (!TOKEN || !MONGO_URI || !CRYPTOCLOUD_API_KEY) {
    logger.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
    process.exit(1);
}

const bot = new TelegramBot(TOKEN);
const client = new MongoClient(MONGO_URI);

const adminChatId = 895583535;
const waitingForAction = {};
let selectedRegion = 'RU';
let db, referralService, promoService, botHandlers;

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async function connectToDb() {
    try {
        await client.connect();
        db = client.db('bot_db');

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
        referralService = new ReferralService(db);
        promoService = new PromoService(db);
        botHandlers = new BotHandlers(bot, db, referralService, promoService, adminChatId);

        logger.success("Connected to MongoDB and services initialized");
    } catch (e) {
        logger.error("Failed to connect to MongoDB", e);
        process.exit(1);
    }
}

// –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook
async function setWebhook() {
    try {
        const webhookUrl = `${WEBHOOK_URL}/webhook_telegram`;
        await bot.setWebHook(webhookUrl);
        logger.success(`Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${webhookUrl}`);
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:', error);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
async function initialize() {
    await connectToDb();
    if (WEBHOOK_URL) {
        await setWebhook();
    }
}

initialize();

// Health check endpoints
app.get('/', (req, res) => {
    res.json({
        status: 'OK',
        message: 'Improved Telegram Bot Server v2.0',
        features: [
            'Referral System',
            'Promo Codes',
            'Advanced Logging',
            'Data Validation',
            'Error Handling'
        ],
        timestamp: new Date().toISOString()
    });
});

app.get('/health', (req, res) => {
    res.json({
        status: 'healthy',
        uptime: process.uptime(),
        version: '2.0.0'
    });
});

// Webhook –¥–ª—è CryptoCloud –ø–ª–∞—Ç–µ–∂–µ–π
app.post('/webhook', async (req, res) => {
    try {
        const data = req.body;
        logger.info('CryptoCloud webhook data received', data);

        if (data.status === 'success') {
            const payload = JSON.parse(data.payload || '{}');
            const userId = payload.chatId;

            await processSuccessfulPayment(userId, data.amount, data.currency, payload);
        }

        res.sendStatus(200);
    } catch (e) {
        logger.error('Webhook error:', e);
        res.sendStatus(500);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
async function processSuccessfulPayment(userId, amount, currency, payload) {
    try {
        const usersCollection = db.collection('users');
        const user = await usersCollection.findOne({ chatId: userId });
        let purchases = user ? user.purchases : 0;
        purchases++;

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        await usersCollection.updateOne(
            { chatId: userId },
            {
                $set: {
                    purchases: purchases,
                    lastPurchase: new Date(),
                    totalSpent: (user?.totalSpent || 0) + parseFloat(amount)
                }
            },
            { upsert: true }
        );

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å
        const referralResult = await referralService.processReferralBonus(userId, parseFloat(amount), currency);

        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞, –µ—Å–ª–∏ –±—ã–ª
        if (payload.promoCode) {
            await promoService.confirmPromoUsage(userId, payload.promoCode, payload.discount || 0, parseFloat(amount));
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        let successMessage = '‚úÖ *–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!* –ú—ã –ø–æ–ø–æ–ª–Ω–∏–º –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!';

        if (payload.promoCode) {
            successMessage += `\n\nüé´ –ü—Ä–æ–º–æ–∫–æ–¥ ${payload.promoCode} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!`;
        }

        await bot.sendMessage(userId, successMessage, { parse_mode: 'Markdown' });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ–Ω—É—Å –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫
        if (purchases % 5 === 0) {
            const bonusAmount = LOYALTY_LEVELS[Math.min(purchases, 50)]?.bonus || 50;
            await bot.sendMessage(userId, `üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!* üéâ –í—ã —Å–æ–≤–µ—Ä—à–∏–ª–∏ ${purchases} –ø–æ–∫—É–ø–æ–∫ –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ –±–æ–Ω—É—Å ‚Äî *${bonusAmount} –±–æ–Ω—É—Å–Ω—ã—Ö –∞–ª–º–∞–∑–æ–≤!*`, { parse_mode: 'Markdown' });
        }

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º –±–æ–Ω—É—Å–µ
        if (referralResult.success) {
            await bot.sendMessage(referralResult.referrerId,
                `üí∞ *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å!*\n\n–í–∞—à –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π –¥—Ä—É–≥ —Å–æ–≤–µ—Ä—à–∏–ª –ø–æ–∫—É–ø–∫—É!\n` +
                `–í—ã –ø–æ–ª—É—á–∏–ª–∏: *${referralResult.bonus} –±–æ–Ω—É—Å–Ω—ã—Ö –∞–ª–º–∞–∑–æ–≤* üíé`,
                { parse_mode: 'Markdown' }
            );
        }

        // –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        let adminMessage = `‚úÖ *–ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ CryptoCloud!*\n` +
            `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${payload.username}\n` +
            `–°—É–º–º–∞: ${amount} ${currency}\n` +
            `–ü–æ–∫—É–ø–æ–∫: ${purchases}`;

        if (payload.promoCode) {
            adminMessage += `\nüé´ –ü—Ä–æ–º–æ–∫–æ–¥: ${payload.promoCode}`;
        }

        if (referralResult.success) {
            adminMessage += `\nüí∞ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å: ${referralResult.bonus}`;
        }

        await bot.sendMessage(adminChatId, adminMessage, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚úÖ –ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω', callback_data: `complete_order_${userId}` }]
                ]
            }
        });

        // –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
        logger.financial('order', parseFloat(amount), currency, userId, payload);

    } catch (error) {
        logger.error('Error processing successful payment', error);
    }
}

// Webhook –¥–ª—è Telegram
app.post('/webhook_telegram', (req, res) => {
    try {
        logger.info('Telegram update received');
        bot.processUpdate(req.body);
        res.sendStatus(200);
    } catch (e) {
        logger.error('processUpdate error:', e);
        res.sendStatus(500);
    }
});

// Endpoint –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook
app.get('/set-webhook', async (req, res) => {
    try {
        await setWebhook();
        res.json({ success: true, message: 'Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' });
    } catch (error) {
        res.status(500).json({ success: false, error: error.message });
    }
});

// –§—É–Ω–∫—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
async function showMainMenu(chatId, messageId = null) {
    try {
        const menuText =
            'üíé *ANNUR DIAMONDS v2.0* üíé\n\n' +
            '‚Ä¢ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–ª–º–∞–∑–æ–≤ –¥–ª—è Mobile Legends: Bang Bang\n\n' +
            '‚Ä¢ *–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:*\n' +
            '‚Ä¢ *–†–æ—Å—Å–∏—è:* –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞\n' +
            '‚Ä¢ *–ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω:* O! –î–µ–Ω—å–≥–∏, Balance.kg\n\n' +
            '‚ö° –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞ 5-15 –º–∏–Ω—É—Ç!\n\n' +
            'üéÅ *–ù–æ–≤–∏–Ω–∫–∏:*\n' +
            '‚Ä¢ üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ - –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ —Å –¥—Ä—É–∑–µ–π!\n' +
            '‚Ä¢ üé´ –ü—Ä–æ–º–æ–∫–æ–¥—ã –∏ —Å–∫–∏–¥–∫–∏\n' +
            '‚Ä¢ üìä –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏';

        const keyboard = [
            [
                { text: 'üíé –ö—É–ø–∏—Ç—å –∞–ª–º–∞–∑—ã', callback_data: 'buy_diamonds' },
                { text: 'üìä –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫', callback_data: 'purchase_history' }
            ],
            [
                { text: 'üë• –†–µ—Ñ–µ—Ä–∞–ª—ã', callback_data: 'referral_menu' },
                { text: 'üé´ –ü—Ä–æ–º–æ–∫–æ–¥', callback_data: 'promo_menu' }
            ],
            [
                { text: 'üíñ –û—Ç–∑—ã–≤—ã', callback_data: 'reviews' },
                { text: 'üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data: 'support' }
            ]
        ];

        const options = {
            parse_mode: 'Markdown',
            reply_markup: { inline_keyboard: keyboard }
        };

        if (messageId) {
            await safeEditMessage(chatId, messageId, menuText, options);
        } else {
            await bot.sendMessage(chatId, menuText, options);
        }

        logger.userAction(chatId, 'main_menu_viewed');

    } catch (error) {
        logger.error('Error showing main menu', error);
        await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start');
    }
}

// –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
async function safeEditMessage(chatId, messageId, text, options) {
    try {
        await bot.editMessageText(text, {
            chat_id: chatId,
            message_id: messageId,
            ...options
        });
    } catch (error) {
        if (options?.reply_markup) {
            try {
                await bot.editMessageReplyMarkup(options.reply_markup, {
                    chat_id: chatId,
                    message_id: messageId
                });
            } catch (secondError) {
                setTimeout(async () => {
                    await deleteMessage(chatId, messageId);
                    await bot.sendMessage(chatId, text, options);
                }, 100);
            }
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
async function deleteMessage(chatId, messageId) {
    try {
        await bot.deleteMessage(chatId, messageId);
    } catch (error) {
        logger.warn('Message already deleted or cannot be deleted', { chatId, messageId });
    }
}

// –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
bot.onText(/\/start(?:\s+(.+))?/, async (msg, match) => {
    const chatId = msg.chat.id;
    const referralCode = match ? match[1] : null;

    logger.userAction(chatId, 'bot_started', { referralCode });

    try {
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ–≥–æ
        if (referralCode) {
            const result = await referralService.activateReferral(referralCode, chatId);
            if (result.success) {
                await bot.sendMessage(chatId,
                    `üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!*\n\n` +
                    `–í—ã –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${result.referrerName}!\n` +
                    `–ü–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É 5% –Ω–∞ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑! üíé`,
                    { parse_mode: 'Markdown' }
                );
            }
        }

        await showMainMenu(chatId);
    } catch (error) {
        logger.error('Error in start command', error);
        await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
});

// –ö–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
bot.onText(/\/history/, (msg) => botHandlers.handleHistory(msg));
bot.onText(/\/mybonus/, (msg) => botHandlers.handleMyBonus(msg));
bot.onText(/\/stats/, (msg) => botHandlers.handleStats(msg));
bot.onText(/\/createpromo/, (msg) => botHandlers.handleCreatePromo(msg));

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', (msg) => botHandlers.handleMessage(msg));

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
bot.on('callback_query', async (q) => {
    const chatId = q.message.chat.id;
    const messageId = q.message.message_id;

    try {
        await bot.answerCallbackQuery(q.id);

        if (q.data === 'buy_diamonds') {
            await showRegionMenu(chatId, messageId);

        } else if (q.data === 'region_ru') {
            selectedRegion = 'RU';
            await showDiamondsMenu(chatId, messageId);

        } else if (q.data === 'region_kg') {
            selectedRegion = 'KG';
            await showDiamondsMenu(chatId, messageId);

        } else if (q.data === 'purchase_history') {
            await deleteMessage(chatId, messageId);
            await botHandlers.showPurchaseHistory(chatId);

        } else if (q.data === 'referral_menu') {
            await showReferralMenu(chatId, messageId);

        } else if (q.data === 'promo_menu') {
            await showPromoMenu(chatId, messageId);

        } else if (q.data === 'share_referral') {
            const stats = await referralService.getReferralStats(chatId);
            if (stats?.referralCode) {
                const shareText = `üéÅ –ü–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É 5% –Ω–∞ –∞–ª–º–∞–∑—ã MLBB!\n\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –ø–æ –º–æ–µ–π —Å—Å—ã–ª–∫–µ: t.me/your_bot?start=${stats.referralCode}`;
                await bot.sendMessage(chatId, shareText);
            }

        } else if (q.data === 'skip_promo') {
            if (waitingForAction[chatId]) {
                waitingForAction[chatId].step = 'paymentChoice';
                await botHandlers.showPaymentMethods(chatId, waitingForAction[chatId]);
            }

        } else if (q.data === 'retry_promo') {
            await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–æ–º–æ–∫–æ–¥:');

        } else if (q.data === 'reviews') {
            await bot.sendMessage(chatId, 'üíñ –û—Ç–∑—ã–≤—ã –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: https://t.me/annurreviews');

        } else if (q.data === 'support') {
            await bot.sendMessage(chatId, 'üìû *–ü–æ–¥–¥–µ—Ä–∂–∫–∞*\n\n–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @annur_admin', { parse_mode: 'Markdown' });

        } else if (q.data === 'back_to_start') {
            await showMainMenu(chatId, messageId);

        } else if (q.data === 'back_to_regions') {
            await showRegionMenu(chatId, messageId);

        } else if (q.data === 'back_to_diamonds') {
            await showDiamondsMenu(chatId, messageId);

        } else if (q.data === 'back_to_payment') {
            const orderData = waitingForAction[chatId];
            if (orderData) {
                await deleteMessage(chatId, messageId);
                await botHandlers.showPaymentMethods(chatId, orderData);
            } else {
                await showMainMenu(chatId, messageId);
            }

        } else if (q.data.startsWith('diamond_')) {
            const selectedItemIndex = q.data.split('_')[1];
            const diamondsData = selectedRegion === 'RU' ? DIAMONDS_DATA_RU : DIAMONDS_DATA_KG;
            const selectedItem = diamondsData[selectedItemIndex];

            waitingForAction[chatId] = {
                step: 'playerId',
                index: selectedItemIndex,
                region: selectedRegion,
                item: selectedItem
            };

            await bot.sendMessage(chatId,
                `–í—ã –≤—ã–±—Ä–∞–ª–∏ *${typeof selectedItem.amount === 'number' ? `${selectedItem.amount}üíé` : selectedItem.amount}* –∑–∞ *${selectedItem.price}* ${selectedRegion === 'RU' ? '‚ÇΩ' : 'KGS'}.\n\n` +
                `üéÆ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ ID —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ MLBB:`,
                { parse_mode: 'Markdown' }
            );

            logger.userAction(chatId, 'diamond_selected', { index: selectedItemIndex, region: selectedRegion });

        } else if (q.data.startsWith('pay_crypto_')) {
            await handleCryptoPayment(q);

        } else if (q.data.startsWith('confirm_payment_')) {
            await handlePaymentConfirmation(q, 'confirm');

        } else if (q.data.startsWith('decline_payment_')) {
            await handlePaymentConfirmation(q, 'decline');

        } else if (q.data.startsWith('complete_order_')) {
            await handleOrderCompletion(q);
        }

        // –î—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —á–µ—Ä–µ–∑ botHandlers...

    } catch (e) {
        logger.error('Callback error:', e);
        try {
            await bot.answerCallbackQuery(q.id, { text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.' });
        } catch (answerError) {
            logger.error('Error answering callback:', answerError);
        }
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏–ø—Ç–æ-–ø–ª–∞—Ç–µ–∂–µ–π —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏
async function handleCryptoPayment(q) {
    const [, , index] = q.data.split('_');
    const chatId = q.message.chat.id;
    const orderData = waitingForAction[chatId];
    const diamondsData = orderData.region === 'RU' ? DIAMONDS_DATA_RU : DIAMONDS_DATA_KG;
    const selectedItem = diamondsData[index];

    const currency = selectedRegion === 'RU' ? 'RUB' : 'USD';
    const userFirstName = q.from.first_name;
    const userUsername = q.from.username;

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Ü–µ–Ω—É —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–º–æ–∫–æ–¥–∞
    const finalPrice = orderData.finalPrice || selectedItem.price;

    try {
        const requestData = {
            shop_id: CRYPTOCLOUD_SHOP_ID,
            amount: parseFloat(finalPrice),
            currency: currency,
            order_id: `diamond_${Date.now()}_${chatId}`,
            description: `${typeof selectedItem.amount === 'number' ? `${selectedItem.amount} –∞–ª–º–∞–∑–æ–≤` : selectedItem.amount} –¥–ª—è MLBB`,
            payload: JSON.stringify({
                chatId: chatId,
                username: userUsername || userFirstName,
                playerId: orderData.playerId,
                region: orderData.region,
                itemIndex: index,
                promoCode: orderData.promoCode || null,
                discount: orderData.discount || 0
            })
        };

        const response = await axios.post('https://api.cryptocloud.plus/v2/invoice/create', requestData, {
            headers: {
                'Authorization': `Token ${CRYPTOCLOUD_API_KEY}`,
                'Content-Type': 'application/json'
            },
            timeout: 10000
        });

        if (response.data && response.data.result && response.data.result.link) {
            const paymentLink = response.data.result.link;

            let adminMessage = `üì¢ *–ù–û–í–´–ô –ó–ê–ö–ê–ó (–ö–†–ò–ü–¢–û)*\n\n` +
                `*–¢–æ–≤–∞—Ä:* ${typeof selectedItem.amount === 'number' ? `${selectedItem.amount}üíé` : selectedItem.amount}\n` +
                `*–°—É–º–º–∞:* ${finalPrice} ${currency}\n` +
                `*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* ${userUsername ? `@${userUsername}` : userFirstName}\n` +
                `*ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:* ${q.from.id}\n` +
                `*ID –∏–≥—Ä–æ–∫–∞ MLBB:* ${orderData.playerId}\n` +
                `*–†–µ–≥–∏–æ–Ω:* ${orderData.region}`;

            if (orderData.promoCode) {
                adminMessage += `\n*–ü—Ä–æ–º–æ–∫–æ–¥:* ${orderData.promoCode} (-${orderData.discount})`;
            }

            await bot.sendMessage(adminChatId, adminMessage, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚úÖ –ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω', callback_data: `complete_order_${q.from.id}` }]
                    ]
                }
            });

            let userMessage = `üí≥ *–û–ø–ª–∞—Ç–∞ –≥–æ—Ç–æ–≤–∞!*\n\n` +
                `*–¢–æ–≤–∞—Ä:* ${typeof selectedItem.amount === 'number' ? `${selectedItem.amount}üíé` : selectedItem.amount}\n`;

            if (orderData.promoCode) {
                userMessage += `*–ü—Ä–æ–º–æ–∫–æ–¥:* ${orderData.promoCode}\n` +
                    `*–°–∫–∏–¥–∫–∞:* -${orderData.discount} ${currency === 'RUB' ? '‚ÇΩ' : 'KGS'}\n` +
                    `*~~–¶–µ–Ω–∞:~~ ${selectedItem.price}*\n`;
            }

            userMessage += `*–ö –æ–ø–ª–∞—Ç–µ:* ${finalPrice} ${currency}\n\n` +
                `–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π:`;

            await bot.sendMessage(chatId, userMessage, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π', url: paymentLink }],
                        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_diamonds' }]
                    ]
                }
            });

            delete waitingForAction[chatId];
            logger.userAction(chatId, 'crypto_payment_created', { finalPrice, promoCode: orderData.promoCode });

        } else {
            throw new Error('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç CryptoCloud API');
        }

    } catch (e) {
        logger.error('CryptoCloud API error:', e);

        let errorMessage = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.';

        if (e.response?.status === 401) {
            errorMessage = '‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ CryptoCloud. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á.';
        } else if (e.response?.status === 400) {
            errorMessage = '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –≤–∞–ª—é—Ç—É.';
        } else if (e.response?.data?.message) {
            errorMessage = `‚ùå ${e.response.data.message}`;
        }

        await bot.sendMessage(chatId, `${errorMessage}\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n‚Ä¢ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ä–µ–≥–∏–æ–Ω\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–ø–ª–∞—Ç—É –ø–µ—Ä–µ–≤–æ–¥–æ–º\n‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: `pay_crypto_${index}` }],
                    [{ text: 'üí≥ –û–ø–ª–∞—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–º', callback_data: `pay_transfer_${index}` }],
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_diamonds' }]
                ]
            }
        });
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
async function handlePaymentConfirmation(q, action) {
    const chatId = q.message.chat.id;

    if (chatId !== adminChatId) return;

    const userId = parseInt(q.data.split('_')[2]);

    if (action === 'confirm') {
        await bot.sendMessage(userId, `‚úÖ *–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!* –ú—ã –ø–æ–ø–æ–ª–Ω–∏–º –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!`, { parse_mode: 'Markdown' });
        await bot.sendMessage(chatId, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.');

        try {
            const usersCollection = db.collection('users');
            const user = await usersCollection.findOne({ chatId: userId });
            let purchases = user ? user.purchases : 0;
            purchases++;

            await usersCollection.updateOne(
                { chatId: userId },
                { $set: { purchases: purchases, lastPurchase: new Date() } },
                { upsert: true }
            );

            if (purchases % 5 === 0) {
                await bot.sendMessage(userId, `üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!* üéâ –í—ã —Å–æ–≤–µ—Ä—à–∏–ª–∏ ${purchases} –ø–æ–∫—É–ø–æ–∫ –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ –±–æ–Ω—É—Å ‚Äî *50 –±–æ–Ω—É—Å–Ω—ã—Ö –∞–ª–º–∞–∑–æ–≤!*`, { parse_mode: 'Markdown' });
            }

            await bot.sendMessage(chatId, '–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∏ –Ω–∞–∂–∞—Ç—å "–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω".', {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚úÖ –ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω', callback_data: `complete_order_${userId}` }]
                    ]
                }
            });

            logger.userAction(adminChatId, 'payment_confirmed', { userId });

        } catch (error) {
            logger.error('Database error in payment confirmation:', error);
        }

    } else if (action === 'decline') {
        await bot.sendMessage(userId, '‚ùå *–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.* –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø–ª–∞—Ç–µ–∂–∞ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.', { parse_mode: 'Markdown' });
        await bot.sendMessage(chatId, '–û—Ç–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.');

        logger.userAction(adminChatId, 'payment_declined', { userId });
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
async function handleOrderCompletion(q) {
    const chatId = q.message.chat.id;

    if (chatId !== adminChatId) return;

    const userId = parseInt(q.data.split('_')[2]);

    await bot.sendMessage(userId, `üéâ *–í–∞—à –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω!* üéâ\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –∏–≥—Ä–µ. –ï—Å–ª–∏ –≤–∞–º –≤—Å–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å, –±—É–¥–µ–º —Ä–∞–¥—ã –≤–∞—à–µ–º—É –æ—Ç–∑—ã–≤—É.`, {
        parse_mode: 'Markdown',
        reply_markup: {
            inline_keyboard: [
                [{ text: '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ ‚ù§Ô∏è', url: 'https://t.me/annurreviews' }],
                [{ text: 'üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞', callback_data: 'referral_menu' }]
            ]
        }
    });
    await bot.sendMessage(chatId, '–°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.');

    logger.userAction(adminChatId, 'order_completed', { userId });
}

// –î–æ–±–∞–≤–∏–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–µ–Ω—é
async function showRegionMenu(chatId, messageId = null) {
    try {
        const regionText =
            'üåç *–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏–æ–Ω*\n\n' +
            'üá∑üá∫ *–†–æ—Å—Å–∏—è* - –ø–µ—Ä–µ–≤–æ–¥—ã, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞\n' +
            'üá∞üá¨ *–ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω* - O! –î–µ–Ω—å–≥–∏, Balance.kg\n\n' +
            'üí° –û—Ç —Ä–µ–≥–∏–æ–Ω–∞ –∑–∞–≤–∏—Å—è—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã –∏ —Ü–µ–Ω—ã';

        const keyboard = [
            [
                { text: 'üá∑üá∫ –†–æ—Å—Å–∏—è', callback_data: 'region_ru' },
                { text: 'üá∞üá¨ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω', callback_data: 'region_kg' }
            ],
            [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_start' }]
        ];

        const options = {
            parse_mode: 'Markdown',
            reply_markup: { inline_keyboard: keyboard }
        };

        if (messageId) {
            await safeEditMessage(chatId, messageId, regionText, options);
        } else {
            await bot.sendMessage(chatId, regionText, options);
        }

        logger.userAction(chatId, 'region_menu_viewed');

    } catch (error) {
        logger.error('Error showing region menu', error);
        await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é —Ä–µ–≥–∏–æ–Ω–æ–≤');
    }
}

async function showDiamondsMenu(chatId, messageId = null) {
    try {
        const currency = selectedRegion === 'RU' ? '‚ÇΩ' : 'KGS';
        const diamondsData = selectedRegion === 'RU' ? DIAMONDS_DATA_RU : DIAMONDS_DATA_KG;
        const keyboard = [];
        let currentRow = [];

        diamondsData.forEach((d, index) => {
            const amountText = typeof d.amount === 'number' ? `${d.amount}üíé` : d.amount;

            currentRow.push({
                text: `${amountText} ‚Äî ${d.price.toLocaleString('ru-RU')} ${currency}`,
                callback_data: `diamond_${index}`
            });

            if (currentRow.length === 2 || index === diamondsData.length - 1) {
                keyboard.push(currentRow);
                currentRow = [];
            }
        });

        keyboard.push([{ text: 'üîô –ö –≤—ã–±–æ—Ä—É —Ä–µ–≥–∏–æ–Ω–∞', callback_data: 'back_to_regions' }]);

        const menuText =
            `üíé *–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –∞–ª–º–∞–∑–æ–≤*\n\n` +
            `üìç *–†–µ–≥–∏–æ–Ω:* ${selectedRegion === 'RU' ? 'üá∑üá∫ –†–æ—Å—Å–∏—è' : 'üá∞üá¨ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω'}\n` +
            `üí∞ *–í–∞–ª—é—Ç–∞:* ${currency}\n\n` +
            `üí° *–ü–æ–¥—Å–∫–∞–∑–∫–∞:* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –¥–ª—è —Å–∫–∏–¥–∫–∏!\n` +
            `–í—Å–µ —Ü–µ–Ω—ã —É–∫–∞–∑–∞–Ω—ã —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–π:`;

        const options = {
            parse_mode: 'Markdown',
            reply_markup: { inline_keyboard: keyboard }
        };

        if (messageId) {
            await safeEditMessage(chatId, messageId, menuText, options);
        } else {
            await bot.sendMessage(chatId, menuText, options);
        }

        logger.userAction(chatId, 'diamonds_menu_viewed', { region: selectedRegion });

    } catch (error) {
        logger.error('Error showing diamonds menu', error);
        await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ –∞–ª–º–∞–∑–æ–≤');
    }
}

async function showReferralMenu(chatId, messageId = null) {
    try {
        const stats = await referralService.getReferralStats(chatId);

        let referralText = 'üë• *–†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –ü–†–û–ì–†–ê–ú–ú–ê*\n\n';

        if (!stats?.referralCode) {
            const newCode = await referralService.createReferralCode(chatId);
            referralText += `üéØ *–í–∞—à –∫–æ–¥:* \`${newCode}\`\n\n`;
        } else {
            referralText += `üéØ *–í–∞—à –∫–æ–¥:* \`${stats.referralCode}\`\n\n`;
        }

        referralText +=
            `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n` +
            `‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: ${stats?.referredCount || 0} —á–µ–ª–æ–≤–µ–∫\n` +
            `‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${stats?.totalEarnings || 0} –∞–ª–º–∞–∑–æ–≤\n` +
            `‚Ä¢ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${stats?.currentBonus || 0} –∞–ª–º–∞–∑–æ–≤\n\n` +

            `üí∞ *–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:*\n` +
            `‚Ä¢ –î—Ä—É–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ –≤–∞—à–µ–º—É –∫–æ–¥—É\n` +
            `‚Ä¢ –ü–æ–ª—É—á–∞–µ—Ç —Å–∫–∏–¥–∫—É 5% –Ω–∞ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑\n` +
            `‚Ä¢ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 3% —Å –µ–≥–æ –∑–∞–∫–∞–∑–æ–≤\n` +
            `‚Ä¢ –ß–µ–º –≤—ã—à–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å, —Ç–µ–º –±–æ–ª—å—à–µ –±–æ–Ω—É—Å!\n\n` +

            `üéÅ *–ú–Ω–æ–∂–∏—Ç–µ–ª–∏ –ø–æ —É—Ä–æ–≤–Ω—è–º:*\n` +
            `‚Ä¢ 5+ –ø–æ–∫—É–ø–æ–∫: +20% –∫ –±–æ–Ω—É—Å—É\n` +
            `‚Ä¢ 10+ –ø–æ–∫—É–ø–æ–∫: +50% –∫ –±–æ–Ω—É—Å—É\n` +
            `‚Ä¢ 20+ –ø–æ–∫—É–ø–æ–∫: x2 –∫ –±–æ–Ω—É—Å—É`;

        const keyboard = [
            [{ text: 'üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–¥–æ–º', callback_data: 'share_referral' }],
            [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_start' }]
        ];

        const options = {
            parse_mode: 'Markdown',
            reply_markup: { inline_keyboard: keyboard }
        };

        if (messageId) {
            await safeEditMessage(chatId, messageId, referralText, options);
        } else {
            await bot.sendMessage(chatId, referralText, options);
        }

        logger.userAction(chatId, 'referral_menu_viewed');

    } catch (error) {
        logger.error('Error showing referral menu', error);
        await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã');
    }
}

async function showPromoMenu(chatId, messageId = null) {
    try {
        const promoText =
            'üé´ *–ü–†–û–ú–û–ö–û–î–´ –ò –°–ö–ò–î–ö–ò*\n\n' +

            'üí° *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*\n' +
            '1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä\n' +
            '2. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏\n' +
            '3. –ü–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É!\n\n' +

            'üéÅ *–í–∏–¥—ã –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:*\n' +
            '‚Ä¢ –°–∫–∏–¥–∫–∏ –Ω–∞ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑\n' +
            '‚Ä¢ –°–µ–∑–æ–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏\n' +
            '‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n\n' +

            'üìù –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∫—É–ø–∫—É:';

        const keyboard = [
            [{ text: 'üíé –ö—É–ø–∏—Ç—å —Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–º', callback_data: 'buy_diamonds' }],
            [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_start' }]
        ];

        const options = {
            parse_mode: 'Markdown',
            reply_markup: { inline_keyboard: keyboard }
        };

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥
        const user = await db.collection('users').findOne({ chatId });
        if (!user?.purchases) {
            const welcomeCode = await promoService.createWelcomePromo(chatId);
            if (welcomeCode) {
                const welcomeText = promoText + `\nüéâ *–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å:* \`${welcomeCode}\`\n*–°–∫–∏–¥–∫–∞ 7% –Ω–∞ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑!*`;

                if (messageId) {
                    await safeEditMessage(chatId, messageId, welcomeText, options);
                } else {
                    await bot.sendMessage(chatId, welcomeText, options);
                }
                return;
            }
        }

        if (messageId) {
            await safeEditMessage(chatId, messageId, promoText, options);
        } else {
            await bot.sendMessage(chatId, promoText, options);
        }

        logger.userAction(chatId, 'promo_menu_viewed');

    } catch (error) {
        logger.error('Error showing promo menu', error);
        await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤');
    }
}

// Graceful shutdown
process.on('SIGTERM', async () => {
    logger.info('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
    await client.close();
    process.exit(0);
});

process.on('SIGINT', async () => {
    logger.info('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
    await client.close();
    process.exit(0);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, '0.0.0.0', () => {
    logger.success(`Server running on port ${PORT}`);
    logger.info(`Webhook URL: ${WEBHOOK_URL}`);
    logger.info('Bot version 2.0 started with all improvements');
});

module.exports = { app, bot, db };