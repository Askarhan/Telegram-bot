console.log('üîç Checking environment variables:');
console.log('TOKEN exists:', !!process.env.TOKEN);
console.log('MONGO_URI exists:', !!process.env.MONGO_URI);
console.log('CRYPTOCLOUD_API_KEY exists:', !!process.env.CRYPTOCLOUD_API_KEY);
console.log('WEBHOOK_URL:', process.env.WEBHOOK_URL);

const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const { MongoClient } = require('mongodb');
const axios = require('axios');

const app = express();
app.use(express.json());

// –ò–°–ü–û–õ–¨–ó–£–ï–ú –¢–û–õ–¨–ö–û –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø
const PORT = process.env.PORT || 3000;
const TOKEN = process.env.TOKEN; // –£–±—Ä–∞–ª–∏ —Ç–æ–∫–µ–Ω –∏–∑ –∫–æ–¥–∞!
const MONGO_URI = process.env.MONGO_URI;
const CRYPTOCLOUD_API_KEY = process.env.CRYPTOCLOUD_API_KEY;
const CRYPTOCLOUD_SHOP_ID = process.env.CRYPTOCLOUD_SHOP_ID;
const WEBHOOK_URL = process.env.WEBHOOK_URL; // https://your-app.onrender.com

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if (!TOKEN || !MONGO_URI || !CRYPTOCLOUD_API_KEY) {
    console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
    process.exit(1);
}

const bot = new TelegramBot(TOKEN);
const client = new MongoClient(MONGO_URI);

const adminChatId = 895583535;

const waitingForAction = {};
let selectedRegion = 'RU';
let db;

async function connectToDb() {
    try {
        await client.connect();
        db = client.db('bot_db');
        console.log("‚úÖ Connected to MongoDB");
    } catch (e) {
        console.error("‚ùå Failed to connect to MongoDB", e);
    }
}

// –í–ê–ñ–ù–û: –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook
async function setWebhook() {
    try {
        const webhookUrl = `${WEBHOOK_URL}/webhook_telegram`;
        await bot.setWebHook(webhookUrl);
        console.log(`‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${webhookUrl}`);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:', error);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
async function initialize() {
    await connectToDb();
    if (WEBHOOK_URL) {
        await setWebhook();
    }
}

initialize();

const diamondsDataRU = [
    { amount: '–ù–µ–¥–µ–ª—å–Ω—ã–π –∞–ª–º–∞–∑–Ω—ã–π –ø—Ä–æ–ø—É—Å–∫', price: 217 },
    { amount: '–°—É–º–µ—Ä–µ—á–Ω—ã–π –ø—Ä–æ–ø—É—Å–∫', price: 858 },
    { amount: 56, price: 124 },
    { amount: 86, price: 152 },
    { amount: 172, price: 280 },
    { amount: 257, price: 411 },
    { amount: 706, price: 1224 },
    { amount: 2195, price: 3106 },
    { amount: 3688, price: 5150 },
    { amount: 5532, price: 7470 },
    { amount: 9288, price: 12980 }
];

const diamondsDataKG = [
    { amount: '–ê–ª–º–∞–∑–Ω—ã–π –ø—Ä–æ–ø—É—Å–∫ (w)', price: 181 },
    { amount: '–°—É–º–µ—Ä–µ—á–Ω—ã–π –ø—Ä–æ–ø—É—Å–∫', price: 715 },
    { amount: 56, price: 104 },
    { amount: 86, price: 127 },
    { amount: 172, price: 234 },
    { amount: 257, price: 343 },
    { amount: 706, price: 874 },
    { amount: 2195, price: 2588 },
    { amount: 3688, price: 4292 },
    { amount: 5532, price: 6342 },
    { amount: 9288, price: 10700 }
];

// Health check endpoint
app.get('/', (req, res) => {
    res.json({ 
        status: 'OK', 
        message: 'Telegram Bot Server',
        timestamp: new Date().toISOString()
    });
});

// Health check –¥–ª—è UptimeRobot
app.get('/health', (req, res) => {
    res.json({ status: 'healthy', uptime: process.uptime() });
});

// Webhook –¥–ª—è CryptoCloud –ø–ª–∞—Ç–µ–∂–µ–π
app.post('/webhook', async (req, res) => {
    try {
        const data = req.body;
        console.log('üì¶ CryptoCloud webhook data:', data);
        
        if (data.status === 'success') {
            const userId = data.payload.chatId;

            const usersCollection = db.collection('users');
            const user = await usersCollection.findOne({ chatId: userId });
            let purchases = user ? user.purchases : 0;
            purchases++;

            await usersCollection.updateOne(
                { chatId: userId },
                { $set: { purchases: purchases, lastPurchase: new Date() } },
                { upsert: true }
            );

            await bot.sendMessage(userId, '‚úÖ **–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!** –ú—ã –ø–æ–ø–æ–ª–Ω–∏–º –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!', { parse_mode: 'Markdown' });
            
            if (purchases % 5 === 0) {
                await bot.sendMessage(userId, `üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!** üéâ –í—ã —Å–æ–≤–µ—Ä—à–∏–ª–∏ ${purchases} –ø–æ–∫—É–ø–æ–∫ –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ –±–æ–Ω—É—Å ‚Äî **50 –±–æ–Ω—É—Å–Ω—ã—Ö –∞–ª–º–∞–∑–æ–≤!**`, { parse_mode: 'Markdown' });
            }
            
            await bot.sendMessage(adminChatId, `‚úÖ **–ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ CryptoCloud!**\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${data.payload.username}\n–°—É–º–º–∞: ${data.amount} ${data.currency}`, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚úÖ –ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω', callback_data: `complete_order_${userId}` }]
                    ]
                }
            });
        }

        res.sendStatus(200);
    } catch (e) {
        console.error('‚ùå Webhook error:', e);
        res.sendStatus(500);
    }
});

// Webhook –¥–ª—è Telegram
app.post('/webhook_telegram', (req, res) => {
    try {
        console.log('üì® Telegram update received');
        bot.processUpdate(req.body);
        res.sendStatus(200);
    } catch (e) {
        console.error('‚ùå processUpdate error:', e);
        res.sendStatus(500);
    }
});

// Endpoint –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ)
app.get('/set-webhook', async (req, res) => {
    try {
        await setWebhook();
        res.json({ success: true, message: 'Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' });
    } catch (error) {
        res.status(500).json({ success: false, error: error.message });
    }
});

bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${chatId} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞`);
    showMainMenu(chatId);
});

bot.onText(/\/mybonus/, async (msg) => {
    const chatId = msg.chat.id;
    if (!db) {
        await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞.');
        return;
    }
    try {
        const usersCollection = db.collection('users');
        const user = await usersCollection.findOne({ chatId: chatId });
        const purchases = user ? user.purchases : 0;
        const untilBonus = 5 - (purchases % 5);

        if (purchases === 0) {
            await bot.sendMessage(chatId, `–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫. –°–æ–≤–µ—Ä—à–∏—Ç–µ 5 –ø–æ–∫—É–ø–æ–∫, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å!`);
        } else {
            await bot.sendMessage(chatId, `–í—ã —Å–æ–≤–µ—Ä—à–∏–ª–∏ ${purchases} –ø–æ–∫—É–ø–æ–∫. –û—Å—Ç–∞–ª–æ—Å—å ${untilBonus} –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞!`);
        }
    } catch (error) {
        console.error('‚ùå Database error:', error);
        await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.');
    }
});

bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const isBotCommand = msg.text && msg.text.startsWith('/');

    if (waitingForAction[chatId] && !isBotCommand) {
        if (waitingForAction[chatId].step === 'playerId') {
            const playerId = msg.text;
            const orderData = waitingForAction[chatId];
            const diamondsData = orderData.region === 'RU' ? diamondsDataRU : diamondsDataKG;
            const selectedItem = diamondsData[orderData.index];
            const currency = selectedRegion === 'RU' ? '‚ÇΩ' : 'KGS';

            waitingForAction[chatId].step = 'paymentChoice';
            waitingForAction[chatId].playerId = playerId;
            
            // –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤
            let paymentButtons = [];
            
            if (orderData.region === 'KG') {
                // –î–ª—è –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–∞ - –º–µ—Å—Ç–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
                paymentButtons = [
                    [{ text: 'üí≥ O! –î–µ–Ω—å–≥–∏', callback_data: `pay_omoney_${orderData.index}` }],
                    [{ text: 'üí∞ Balance.kg', callback_data: `pay_balance_${orderData.index}` }],
                    [{ text: 'üè¶ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥', callback_data: `pay_transfer_${orderData.index}` }]
                ];
            } else {
                // –î–ª—è –†–æ—Å—Å–∏–∏ - –∫—Ä–∏–ø—Ç–æ –∏ –ø–µ—Ä–µ–≤–æ–¥—ã
                paymentButtons = [
                    [{ text: 'üè¶ –û–ø–ª–∞—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–º', callback_data: `pay_transfer_${orderData.index}` }],
                    [{ text: '‚Çø –û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π', callback_data: `pay_crypto_${orderData.index}` }]
                ];
            }
            
            await bot.sendMessage(chatId, 
                `–í—ã –≤—ã–±—Ä–∞–ª–∏ *${typeof selectedItem.amount === 'number' ? `${selectedItem.amount}üíé` : selectedItem.amount}* ` +
                `–°—Ç–æ–∏–º–æ—Å—Ç—å: *${selectedItem.price}* ${currency} üí∞\n\n` +
                `${orderData.region === 'KG' ? 'üá∞üá¨ ' : 'üá∑üá∫ '}–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:`,
                {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: paymentButtons
                    }
                }
            );

        } else if (waitingForAction[chatId].step === 'transfer_confirm' || 
                   waitingForAction[chatId].step === 'omoney_confirm' || 
                   waitingForAction[chatId].step === 'balance_confirm') {
            
            const orderData = waitingForAction[chatId];
            const diamondsData = orderData.region === 'RU' ? diamondsDataRU : diamondsDataKG;
            const selectedItem = diamondsData[orderData.index];
            const currency = selectedRegion === 'RU' ? '‚ÇΩ' : 'KGS';
            const userUsername = msg.from.username;
            const userFirstName = msg.from.first_name;
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–ø–ª–∞—Ç—ã –¥–ª—è –∞–¥–º–∏–Ω–∞
            let paymentType = '–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥';
            if (waitingForAction[chatId].step === 'omoney_confirm') {
                paymentType = 'O! –î–µ–Ω—å–≥–∏';
            } else if (waitingForAction[chatId].step === 'balance_confirm') {
                paymentType = 'Balance.kg';
            }
            
            const adminMessage = 
                `üì¢ *–ù–û–í–´–ô –ó–ê–ö–ê–ó (${paymentType})*\n\n` +
                `*–¢–æ–≤–∞—Ä:* ${typeof selectedItem.amount === 'number' ? `${selectedItem.amount}üíé` : selectedItem.amount}\n` +
                `*–°—É–º–º–∞:* ${selectedItem.price} ${currency}\n` +
                `*–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:* ${paymentType}\n` +
                `*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* ${userUsername ? `@${userUsername}` : userFirstName}\n` +
                `*ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:* ${msg.from.id}\n` +
                `*ID –∏–≥—Ä–æ–∫–∞ MLBB:* ${orderData.playerId}\n` +
                `*–†–µ–≥–∏–æ–Ω:* ${orderData.region}\n` +
                `*–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: —Å–∫—Ä–∏–Ω—à–æ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.*`;

            if (msg.photo) {
                await bot.sendPhoto(adminChatId, msg.photo[msg.photo.length - 1].file_id, {
                    caption: adminMessage,
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: `confirm_payment_${chatId}` }],
                            [{ text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `decline_payment_${chatId}` }]
                        ]
                    }
                });
                
                let confirmMessage = '‚úÖ *–í–∞—à —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.*\n\n';
                if (paymentType === 'O! –î–µ–Ω—å–≥–∏') {
                    confirmMessage += 'üì± –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ O! –î–µ–Ω—å–≥–∏...';
                } else if (paymentType === 'Balance.kg') {
                    confirmMessage += 'üí∞ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ Balance.kg...';
                } else {
                    confirmMessage += 'üè¶ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥...';
                }
                confirmMessage += '\n\n–ú—ã —Å–æ–æ–±—â–∏–º –≤–∞–º, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! ‚è±Ô∏è';
                
                await bot.sendMessage(chatId, confirmMessage, { parse_mode: 'Markdown' });
                delete waitingForAction[chatId];
            } else {
                await bot.sendMessage(chatId, 'üì∑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ *—Å–∫—Ä–∏–Ω—à–æ—Ç* (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ), –∞ –Ω–µ –¥—Ä—É–≥–æ–π —Ç–∏–ø —Ñ–∞–π–ª–∞.\n\n–ù–∞–º –Ω—É–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã! üßæ', { parse_mode: 'Markdown' });
            }
        }
    }
});

bot.on('callback_query', async (q) => {
    const chatId = q.message.chat.id;
    const messageId = q.message.message_id;

    try {
        if (q.data === 'buy_diamonds') {
            await editToRegionMenu(chatId, messageId);
        } else if (q.data === 'region_ru') {
            selectedRegion = 'RU';
            await editToDiamondsMenu(chatId, messageId);
        } else if (q.data === 'region_kg') {
            selectedRegion = 'KG';
            await editToDiamondsMenu(chatId, messageId);
        } else if (q.data === 'reviews') {
            await bot.sendMessage(chatId, '–û—Ç–∑—ã–≤—ã –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: https://t.me/annurreviews');
        } else if (q.data === 'leave_review') {
            await bot.sendMessage(chatId, '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –≤—ã –º–æ–∂–µ—Ç–µ –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ: https://t.me/annurreviews');
        } else if (q.data === 'back_to_start') {
            await editToMainMenu(chatId, messageId);
        } else if (q.data === 'back_to_regions') {
            await editToRegionMenu(chatId, messageId);
        } else if (q.data.startsWith('diamond_')) {
            const selectedItemIndex = q.data.split('_')[1];
            const diamondsData = selectedRegion === 'RU' ? diamondsDataRU : diamondsDataKG;
            const selectedItem = diamondsData[selectedItemIndex];

            waitingForAction[chatId] = {
                step: 'playerId',
                index: selectedItemIndex,
                region: selectedRegion,
                item: selectedItem
            };

            await bot.sendMessage(chatId, `–í—ã –≤—ã–±—Ä–∞–ª–∏ **${typeof selectedItem.amount === 'number' ? `${selectedItem.amount}üíé` : selectedItem.amount}** –∑–∞ **${selectedItem.price}** ${selectedRegion === 'RU' ? '‚ÇΩ' : 'KGS'}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ ID —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ MLBB:`, { parse_mode: 'Markdown' });
        
        } else if (q.data.startsWith('pay_transfer_')) {
            const [, , index] = q.data.split('_');
            const orderData = waitingForAction[chatId];
            const diamondsData = orderData.region === 'RU' ? diamondsDataRU : diamondsDataKG;
            const selectedItem = diamondsData[index];
            const currency = selectedRegion === 'RU' ? '‚ÇΩ' : 'KGS';
            
            waitingForAction[chatId].step = 'transfer_confirm';

            const paymentDetails = 
                `üì¢ *–í–ù–ò–ú–ê–ù–ò–ï! –ü–µ—Ä–µ–≤–æ–¥ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω (—Å—Ç—Ä–∞–Ω–∞ –°–ù–ì).*\n\n` +
                `–ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã: –µ—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ–π–¥–µ—Ç –ø–æ –Ω–µ–∑–∞–≤–∏—Å—è—â–∏–º –æ—Ç –Ω–∞—Å –ø—Ä–∏—á–∏–Ω–∞–º, –º—ã –Ω–µ —Å–º–æ–∂–µ–º –Ω–µ—Å—Ç–∏ –∑–∞ —ç—Ç–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å.\n` +
                `–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ. –° –ª—é–±–æ–≤—å—é, ANNUR DIAMONDS üíé\n\n` +
                `*–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${selectedItem.price} ${currency}*\n\n` +
                `*–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:*\n` +
                `*–ü–æ–ª—É—á–∞—Ç–µ–ª—å:* –ê—Å–∫–∞—Ä.–°\n` +
                `*Mbank:* \\+996707711770 / 4177490184319665\n` +
                `*–ë–∞–Ω–∫ –ö–æ–º–ø–∞–Ω—å–æ–Ω:* \\+996707711770 (–ø—Ä—è–º–æ–π –ø–µ—Ä–µ–≤–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞)\n` +
                `\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –≤ —ç—Ç–æ—Ç —á–∞—Ç.`;

            await bot.sendMessage(chatId, paymentDetails, { parse_mode: 'Markdown' });

        } else if (q.data.startsWith('pay_omoney_')) {
            const [, , index] = q.data.split('_');
            const orderData = waitingForAction[chatId];
            const diamondsData = orderData.region === 'RU' ? diamondsDataRU : diamondsDataKG;
            const selectedItem = diamondsData[index];
            
            waitingForAction[chatId].step = 'omoney_confirm';

            const paymentDetails = 
                `üí≥ *O! –î–ï–ù–¨–ì–ò - –ö–´–†–ì–´–ó–°–¢–ê–ù*\n\n` +
                `*–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${selectedItem.price} KGS*\n\n` +
                `üì± *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ:*\n` +
                `1. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ O! –∏–ª–∏ –Ω–∞–±–µ—Ä–∏—Ç–µ \\*111#\n` +
                `2. –í—ã–±–µ—Ä–∏—Ç–µ "–ü–µ—Ä–µ–≤–æ–¥—ã" ‚Üí "–ü–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞"\n` +
                `3. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä: *\\+996 707 711 770*\n` +
                `4. –°—É–º–º–∞: *${selectedItem.price} —Å–æ–º*\n` +
                `5. –ü–æ–ª—É—á–∞—Ç–µ–ª—å: *–ê—Å–∫–∞—Ä –°.*\n\n` +
                `üí° *–í–∞–∂–Ω–æ:* –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –≤ —ç—Ç–æ—Ç —á–∞—Ç!\n\n` +
                `üîî –ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –ø–ª–∞—Ç–µ–∂ –∏ –ø–æ–ø–æ–ª–Ω–∏–º –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 5-15 –º–∏–Ω—É—Ç.`;

            await bot.sendMessage(chatId, paymentDetails, { parse_mode: 'Markdown' });

        } else if (q.data.startsWith('pay_balance_')) {
            const [, , index] = q.data.split('_');
            const orderData = waitingForAction[chatId];
            const diamondsData = orderData.region === 'RU' ? diamondsDataRU : diamondsDataKG;
            const selectedItem = diamondsData[index];
            
            waitingForAction[chatId].step = 'balance_confirm';

            const paymentDetails = 
                `üí∞ *BALANCE.KG - –ö–´–†–ì–´–ó–°–¢–ê–ù*\n\n` +
                `*–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${selectedItem.price} KGS*\n\n` +
                `üåê *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ:*\n` +
                `1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç: *balance.kg*\n` +
                `2. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ\n` +
                `3. –í—ã–±–µ—Ä–∏—Ç–µ "–ü–µ—Ä–µ–≤–æ–¥—ã" ‚Üí "–ù–∞ –∫–æ—à–µ–ª–µ–∫"\n` +
                `4. –ù–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞: *\\+996 707 711 770*\n` +
                `5. –°—É–º–º–∞: *${selectedItem.price} —Å–æ–º*\n` +
                `6. –ü–æ–ª—É—á–∞—Ç–µ–ª—å: *–ê—Å–∫–∞—Ä –°.*\n\n` +
                `üí° *–í–∞–∂–Ω–æ:* –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ —ç—Ç–æ—Ç —á–∞—Ç!\n\n` +
                `üìû *–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞:* –ú–æ–∂–µ—Ç–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –Ω–∞ –∫–æ—Ä–æ—Ç–∫–∏–π –Ω–æ–º–µ—Ä Balance.kg –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É.`;

            await bot.sendMessage(chatId, paymentDetails, { parse_mode: 'Markdown' });

        } else if (q.data.startsWith('pay_crypto_')) {
            const [, , index] = q.data.split('_');
            const orderData = waitingForAction[chatId];
            const diamondsData = orderData.region === 'RU' ? diamondsDataRU : diamondsDataKG;
            const selectedItem = diamondsData[index];
            
            // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤–∞–ª—é—Ç—ã –¥–ª—è CryptoCloud
            const currency = selectedRegion === 'RU' ? 'RUB' : 'USD'; // KGS –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º USD
            const userFirstName = q.from.first_name;
            const userUsername = q.from.username;

            console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ CryptoCloud –ø–ª–∞—Ç–µ–∂–∞...');
            console.log('Shop ID:', CRYPTOCLOUD_SHOP_ID);
            console.log('Amount:', selectedItem.price);
            console.log('Currency:', currency);

            try {
                // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è CryptoCloud API v2
                const requestData = {
                    shop_id: CRYPTOCLOUD_SHOP_ID,
                    amount: parseFloat(selectedItem.price), // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ
                    currency: currency,
                    order_id: `diamond_${Date.now()}_${chatId}`, // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
                    description: `${typeof selectedItem.amount === 'number' ? `${selectedItem.amount} –∞–ª–º–∞–∑–æ–≤` : selectedItem.amount} –¥–ª—è MLBB`,
                    payload: JSON.stringify({
                        chatId: chatId,
                        username: userUsername || userFirstName,
                        playerId: orderData.playerId,
                        region: orderData.region,
                        itemIndex: index
                    })
                };

                console.log('üì¶ Request data:', JSON.stringify(requestData, null, 2));

                const response = await axios.post('https://api.cryptocloud.plus/v2/invoice/create', requestData, {
                    headers: {
                        'Authorization': `Token ${CRYPTOCLOUD_API_KEY}`,
                        'Content-Type': 'application/json'
                    },
                    timeout: 10000 // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
                });

                console.log('‚úÖ CryptoCloud response:', response.data);

                if (response.data && response.data.result && response.data.result.link) {
                    const paymentLink = response.data.result.link;
                
                const adminMessage =
                    `üì¢ **–ù–û–í–´–ô –ó–ê–ö–ê–ó (–ö–†–ò–ü–¢–û)**\n\n` +
                    `**–¢–æ–≤–∞—Ä:** ${typeof selectedItem.amount === 'number' ? `${selectedItem.amount}üíé` : selectedItem.amount}\n` +
                    `**–°—É–º–º–∞:** ${selectedItem.price} ${currency}\n` +
                    `**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** ${userUsername ? `@${userUsername}` : userFirstName}\n` +
                    `**ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:** ${q.from.id}\n` +
                    `**ID –∏–≥—Ä–æ–∫–∞ MLBB:** ${orderData.playerId}\n` +
                    `**–†–µ–≥–∏–æ–Ω:** ${orderData.region}`;
                
                await bot.sendMessage(adminChatId, adminMessage, {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚úÖ –ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω', callback_data: `complete_order_${q.from.id}` }]
                        ]
                    }
                });

                await bot.sendMessage(
                    chatId,
                    `üí≥ **–û–ø–ª–∞—Ç–∞ –≥–æ—Ç–æ–≤–∞!**\n\n` +
                    `**–¢–æ–≤–∞—Ä:** ${typeof selectedItem.amount === 'number' ? `${selectedItem.amount}üíé` : selectedItem.amount}\n` +
                    `**–ö –æ–ø–ª–∞—Ç–µ:** ${selectedItem.price} ${currency}\n\n` +
                    `–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π:`,
                    {
                        parse_mode: 'Markdown',
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π', url: paymentLink }],
                                [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_regions' }]
                            ]
                        }
                    }
                );

                delete waitingForAction[chatId]; // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞

                } else {
                    throw new Error('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç CryptoCloud API');
                }

            } catch (e) {
                console.error('‚ùå CryptoCloud API error details:');
                console.error('Status:', e.response?.status);
                console.error('Status Text:', e.response?.statusText);
                console.error('Headers:', e.response?.headers);
                console.error('Data:', e.response?.data);
                console.error('Message:', e.message);
                
                let errorMessage = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.';
                
                if (e.response?.status === 401) {
                    errorMessage = '‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ CryptoCloud. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á.';
                    console.error('üîë –ü—Ä–æ–≤–µ—Ä—å—Ç–µ CRYPTOCLOUD_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
                } else if (e.response?.status === 400) {
                    errorMessage = '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –≤–∞–ª—é—Ç—É.';
                    console.error('üí∞ –í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å –≤–∞–ª—é—Ç–æ–π –∏–ª–∏ —Å—É–º–º–æ–π');
                } else if (e.response?.data?.message) {
                    errorMessage = `‚ùå ${e.response.data.message}`;
                }
                
                await bot.sendMessage(chatId, `${errorMessage}\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n‚Ä¢ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ä–µ–≥–∏–æ–Ω\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–ø–ª–∞—Ç—É –ø–µ—Ä–µ–≤–æ–¥–æ–º\n‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É`, {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: `pay_crypto_${index}` }],
                            [{ text: 'üí≥ –û–ø–ª–∞—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–º', callback_data: `pay_transfer_${index}` }],
                            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_regions' }]
                        ]
                    }
                });
            }
            
        } else if (q.data.startsWith('confirm_payment_')) {
            const userIdToConfirm = parseInt(q.data.split('_')[2]);
            await bot.sendMessage(userIdToConfirm, `‚úÖ **–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!** –ú—ã –ø–æ–ø–æ–ª–Ω–∏–º –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!`, { parse_mode: 'Markdown' });
            await bot.sendMessage(chatId, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.');

            try {
                const usersCollection = db.collection('users');
                const user = await usersCollection.findOne({ chatId: userIdToConfirm });
                let purchases = user ? user.purchases : 0;
                purchases++;

                await usersCollection.updateOne(
                    { chatId: userIdToConfirm },
                    { $set: { purchases: purchases, lastPurchase: new Date() } },
                    { upsert: true }
                );

                if (purchases % 5 === 0) {
                    await bot.sendMessage(userIdToConfirm, `üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!** üéâ –í—ã —Å–æ–≤–µ—Ä—à–∏–ª–∏ ${purchases} –ø–æ–∫—É–ø–æ–∫ –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ –±–æ–Ω—É—Å ‚Äî **50 –±–æ–Ω—É—Å–Ω—ã—Ö –∞–ª–º–∞–∑–æ–≤!**`, { parse_mode: 'Markdown' });
                }

                await bot.sendMessage(chatId, '–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∏ –Ω–∞–∂–∞—Ç—å "–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω".', {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚úÖ –ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω', callback_data: `complete_order_${userIdToConfirm}` }]
                        ]
                    }
                });
            } catch (error) {
                console.error('‚ùå Database error:', error);
            }

        } else if (q.data.startsWith('decline_payment_')) {
            const userIdToDecline = parseInt(q.data.split('_')[2]);
            await bot.sendMessage(userIdToDecline, '‚ùå **–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.** –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø–ª–∞—Ç–µ–∂–∞ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.', { parse_mode: 'Markdown' });
            await bot.sendMessage(chatId, '–û—Ç–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.');
            
        } else if (q.data.startsWith('complete_order_')) {
            const userIdToComplete = parseInt(q.data.split('_')[2]);
            await bot.sendMessage(userIdToComplete, `üéâ **–í–∞—à –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω!** üéâ\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –∏–≥—Ä–µ. –ï—Å–ª–∏ –≤–∞–º –≤—Å–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å, –±—É–¥–µ–º —Ä–∞–¥—ã –≤–∞—à–µ–º—É –æ—Ç–∑—ã–≤—É.`, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ ‚ù§Ô∏è', url: 'https://t.me/annurreviews' }]
                    ]
                }
            });
            await bot.sendMessage(chatId, '–°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.');
        }

        await bot.answerCallbackQuery(q.id);
    } catch (e) {
        console.error('‚ùå Callback error:', e);
        try {
            await bot.answerCallbackQuery(q.id, { text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.' });
        } catch (answerError) {
            console.error('‚ùå Error answering callback:', answerError);
        }
    }
});

// Graceful shutdown
process.on('SIGTERM', async () => {
    console.log('üîÑ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
    await client.close();
    process.exit(0);
});

async function showMainMenu(chatId) {
    try {
        await bot.sendMessage(chatId, 
            'üíé *ANNUR DIAMONDS* üíé\n\n' +
            'üéÆ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–ª–º–∞–∑–æ–≤ –¥–ª—è Mobile Legends: Bang Bang\n\n' +
            'üí≥ *–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:*\n' +
            'üá∑üá∫ *–†–æ—Å—Å–∏—è:* –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞\n' +
            'üá∞üá¨ *–ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω:* O! –î–µ–Ω—å–≥–∏, Balance.kg\n\n' +
            '‚ö° –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞ 5-15 –º–∏–Ω—É—Ç!', 
            {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: 'üíé –ö—É–ø–∏—Ç—å –∞–ª–º–∞–∑—ã', callback_data: 'buy_diamonds' },
                            { text: 'üíñ –û—Ç–∑—ã–≤—ã', url: 'https://t.me/annurreviews' }
                        ],
                        [{ text: 'üíå –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', url: 'https://t.me/annurreviews' }]
                    ]
                }
            });
    } catch (error) {
        console.error('‚ùå Error showing main menu:', error);
    }
}

async function editToRegionMenu(chatId, messageId) {
    try {
        await bot.editMessageText(
            'üåç *–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏–æ–Ω –¥–ª—è –æ–ø–ª–∞—Ç—ã:*\n\n' +
            'üá∑üá∫ *–†–æ—Å—Å–∏—è* - –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞\n' +
            'üá∞üá¨ *–ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω* - O! –î–µ–Ω—å–≥–∏, Balance.kg, –±–∞–Ω–∫. –ø–µ—Ä–µ–≤–æ–¥—ã', 
            {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: 'üá∑üá∫ –†–æ—Å—Å–∏—è (RU)', callback_data: 'region_ru' },
                            { text: 'üá∞üá¨ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω (KG)', callback_data: 'region_kg' }
                        ],
                        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_start' }]
                    ],
                },
            });
    } catch (error) {
        console.error('‚ùå Error editing to region menu:', error);
    }
}

async function editToDiamondsMenu(chatId, messageId) {
    try {
        const currency = selectedRegion === 'RU' ? '‚ÇΩ' : 'KGS';
        const diamondsData = selectedRegion === 'RU' ? diamondsDataRU : diamondsDataKG;
        const keyboard = [];
        let currentRow = [];

        diamondsData.forEach((d, index) => {
            const amountText = typeof d.amount === 'number' ? `${d.amount}üíé` : d.amount;
            
            currentRow.push({
                text: `${amountText} ‚Äî ${d.price.toLocaleString('ru-RU')} ${currency}`,
                callback_data: `diamond_${index}`
            });

            if (currentRow.length === 2 || index === diamondsData.length - 1) {
                keyboard.push(currentRow);
                currentRow = [];
            }
        });

        keyboard.push([{ text: '–ù–∞–∑–∞–¥ üîô', callback_data: 'back_to_regions' }]);

        await bot.editMessageText(`–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –∞–ª–º–∞–∑–æ–≤ (—Å–µ–π—á–∞—Å –≤—ã–±—Ä–∞–Ω —Ä–µ–≥–∏–æ–Ω: ${selectedRegion}):`, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: { inline_keyboard: keyboard },
        });
    } catch (error) {
        console.error('‚ùå Error editing to diamonds menu:', error);
    }
}

async function editToMainMenu(chatId, messageId) {
    try {
        await bot.editMessageText('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '–ö—É–ø–∏—Ç—å –∞–ª–º–∞–∑—ã üíé', callback_data: 'buy_diamonds' },
                        { text: '–û—Ç–∑—ã–≤—ã üíñ', url: 'https://t.me/annurreviews' }
                    ],
                    [{ text: '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ üíå', url: 'https://t.me/annurreviews' }]
                ]
            }
        });
    } catch (error) {
        console.error('‚ùå Error editing to main menu:', error);
    }
}

app.listen(PORT, () => {
    console.log(`üöÄ Server running on port ${PORT}`);
    console.log(`üìç Webhook URL: ${WEBHOOK_URL}`);
});