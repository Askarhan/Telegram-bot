Const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const { MongoClient } = require('mongodb');
const axios = require('axios');

const app = express();
app.use(express.json());

const PORT = process.env.PORT;
const TOKEN = process.env.TOKEN || '8370855958:AAHC8ry_PsUqso_jC2sAS9CnQnfURk1UW3w';
const MONGO_URI = process.env.MONGO_URI;


const CRYPTOCLOUD_API_KEY = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1dWlkIjoiTmprMk5URT0iLCJ0eXBlIjoicHJvamVjdCIsInYiOiI4YTFlZTY2NzU3YmZiNGJmMzk2NWZiOTQyM2ZjZTI2N2I3MTllMjEyNWZkMmJjNWMzNWExMTNkMTcyZThlMWU5IiwiZXhwIjo4ODE1NjkyODU5NX0.tupMgUWPHW4a1mvdb0oarSMln4P7AFRGxbBJtorHaxw';
const CRYPTOCLOUD_SHOP_ID = '6Pi76JVyHST5yALH';

const bot = new TelegramBot(TOKEN);
const client = new MongoClient(MONGO_URI);

const adminChatId = 895583535;

const waitingForAction = {};
let selectedRegion = 'RU';
let db;

async function connectToDb() {
    try {
        await client.connect();
        db = client.db('bot_db');
        console.log("Connected to MongoDB");
    } catch (e) {
        console.error("Failed to connect to MongoDB", e);
    }
}

connectToDb();

const diamondsDataRU = [
    { amount: '–ù–µ–¥–µ–ª—å–Ω—ã–π –∞–ª–º–∞–∑–Ω—ã–π –ø—Ä–æ–ø—É—Å–∫', price: 217 },
    { amount: '–°—É–º–µ—Ä–µ—á–Ω—ã–π –ø—Ä–æ–ø—É—Å–∫', price: 858 },
    { amount: 56, price: 124 },
    { amount: 86, price: 152 },
    { amount: 172, price: 280 },
    { amount: 257, price: 411 },
    { amount: 706, price: 1224 },
    { amount: 2195, price: 3106 },
    { amount: 3688, price: 5150 },
    { amount: 5532, price: 7470 },
    { amount: 9288, price: 12980 }
];

const diamondsDataKG = [
    { amount: '–ê–ª–º–∞–∑–Ω—ã–π –ø—Ä–æ–ø—É—Å–∫ (w)', price: 181 },
    { amount: '–°—É–º–µ—Ä–µ—á–Ω—ã–π –ø—Ä–æ–ø—É—Å–∫', price: 715 },
    { amount: 56, price: 104 },
    { amount: 86, price: 127 },
    { amount: 172, price: 234 },
    { amount: 257, price: 343 },
    { amount: 706, price: 874 },
    { amount: 2195, price: 2588 },
    { amount: 3688, price: 4292 },
    { amount: 5532, price: 6342 },
    { amount: 9288, price: 10700 }
];

app.get('/', (req, res) => {
    res.send('–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!');
});

app.post('/webhook', async (req, res) => {
    try {
        const data = req.body;
        
        if (data.status === 'success') {
            const userId = data.payload.chatId;

            const usersCollection = db.collection('users');
            const user = await usersCollection.findOne({ chatId: userId });
            let purchases = user ? user.purchases : 0;
            purchases++;

            await usersCollection.updateOne(
                { chatId: userId },
                { $set: { purchases: purchases, lastPurchase: new Date() } },
                { upsert: true }
            );

            await bot.sendMessage(userId, '‚úÖ **–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!** –ú—ã –ø–æ–ø–æ–ª–Ω–∏–º –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!', { parse_mode: 'Markdown' });
            
            if (purchases % 5 === 0) {
                await bot.sendMessage(userId, `üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!** üéâ –í—ã —Å–æ–≤–µ—Ä—à–∏–ª–∏ ${purchases} –ø–æ–∫—É–ø–æ–∫ –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ –±–æ–Ω—É—Å ‚Äî **50 –±–æ–Ω—É—Å–Ω—ã—Ö –∞–ª–º–∞–∑–æ–≤!**`, { parse_mode: 'Markdown' });
            }
            
            await bot.sendMessage(adminChatId, `‚úÖ **–ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ CryptoCloud!**\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${data.payload.username}\n–°—É–º–º–∞: ${data.amount} ${data.currency}`, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚úÖ –ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω', callback_data: `complete_order_${userId}` }]
                    ]
                }
            });

        }

        res.sendStatus(200);
    } catch (e) {
        console.error('Webhook error:', e);
        res.sendStatus(500);
    }
});

app.post('/webhook_telegram', (req, res) => {
    try {
        bot.processUpdate(req.body);
    } catch (e) {
        console.error('processUpdate error:', e);
    }
    res.sendStatus(200);
});

bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    showMainMenu(chatId);
});

bot.onText(/\/mybonus/, async (msg) => {
    const chatId = msg.chat.id;
    if (!db) {
        await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞.');
        return;
    }
    const usersCollection = db.collection('users');
    const user = await usersCollection.findOne({ chatId: chatId });
    const purchases = user ? user.purchases : 0;
    const untilBonus = 5 - (purchases % 5);

    if (purchases === 0) {
        await bot.sendMessage(chatId, `–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫. –°–æ–≤–µ—Ä—à–∏—Ç–µ 5 –ø–æ–∫—É–ø–æ–∫, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å!`);
    } else {
        await bot.sendMessage(chatId, `–í—ã —Å–æ–≤–µ—Ä—à–∏–ª–∏ ${purchases} –ø–æ–∫—É–ø–æ–∫. –û—Å—Ç–∞–ª–æ—Å—å ${untilBonus} –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞!`);
    }
});

bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const isBotCommand = msg.text && msg.text.startsWith('/');

    if (waitingForAction[chatId] && !isBotCommand) {
        if (waitingForAction[chatId].step === 'playerId') {
            const playerId = msg.text;
            const orderData = waitingForAction[chatId];
            const diamondsData = orderData.region === 'RU' ? diamondsDataRU : diamondsDataKG;
            const selectedItem = diamondsData[orderData.index];
            const currency = selectedRegion === 'RU' ? '‚ÇΩ' : 'KGS';

            
            waitingForAction[chatId].step = 'paymentChoice';
            waitingForAction[chatId].playerId = playerId;
            
            await bot.sendMessage(chatId, 
                `–í—ã –≤—ã–±—Ä–∞–ª–∏ **${typeof selectedItem.amount === 'number' ? `${selectedItem.amount}üíé` : selectedItem.amount}** ` +
                `–°—Ç–æ–∏–º–æ—Å—Ç—å: **${selectedItem.price}** ${currency} üí∞\n` +
                `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –¥–∞–Ω–Ω—É—é –ø–æ–∫—É–ø–∫—É, –≤—ã–±—Ä–∞–≤ —É–¥–æ–±–Ω—ã–π –≤–∞–º —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã!`,
                {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '–û–ø–ª–∞—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–º', callback_data: `pay_transfer_${orderData.index}` }],
                            [{ text: '–û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π', callback_data: `pay_crypto_${orderData.index}` }]
                        ]
                    }
                }
            );

        } else if (waitingForAction[chatId].step === 'transfer_confirm') {
            const orderData = waitingForAction[chatId];
            const diamondsData = orderData.region === 'RU' ? diamondsDataRU : diamondsDataKG;
            const selectedItem = diamondsData[orderData.index];
            const currency = selectedRegion === 'RU' ? '‚ÇΩ' : 'KGS';
            const userUsername = msg.from.username;
            const userFirstName = msg.from.first_name;
            
            const adminMessage = 
                `üì¢ **–ù–û–í–´–ô –ó–ê–ö–ê–ó (–û–ø–ª–∞—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–º)**\n\n` +
                `**–¢–æ–≤–∞—Ä:** ${typeof selectedItem.amount === 'number' ? `${selectedItem.amount}üíé` : selectedItem.amount}\n` +
                `**–°—É–º–º–∞:** ${selectedItem.price} ${currency}\n` +
                `**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** ${userUsername ? `@${userUsername}` : userFirstName}\n` +
                `**ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:** ${msg.from.id}\n` +
                `**ID –∏–≥—Ä–æ–∫–∞ MLBB:** ${orderData.playerId}\n` +
                `**–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: —Å–∫—Ä–∏–Ω—à–æ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.**`;

            if (msg.photo) {
                await bot.sendPhoto(adminChatId, msg.photo[msg.photo.length - 1].file_id, {
                    caption: adminMessage,
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: `confirm_payment_${chatId}` }],
                            [{ text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `decline_payment_${chatId}` }]
                        ]
                    }
                });
                await bot.sendMessage(chatId, '‚úÖ **–í–∞—à —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.** –ú—ã —Å–æ–æ–±—â–∏–º –≤–∞–º, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!', { parse_mode: 'Markdown' });
                delete waitingForAction[chatId];
            } else {
                await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ —Å–∫—Ä–∏–Ω—à–æ—Ç (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ), –∞ –Ω–µ –¥—Ä—É–≥–æ–π —Ç–∏–ø —Ñ–∞–π–ª–∞.');
            }
        }
    }
});

bot.on('callback_query', async (q) => {
    const chatId = q.message.chat.id;
    const messageId = q.message.message_id;

    try {
        if (q.data === 'buy_diamonds') {
            await editToRegionMenu(chatId, messageId);
        } else if (q.data === 'region_ru') {
            selectedRegion = 'RU';
            await editToDiamondsMenu(chatId, messageId);
        } else if (q.data === 'region_kg') {
            selectedRegion = 'KG';
            await editToDiamondsMenu(chatId, messageId);
        } else if (q.data === 'reviews') {
        
            await bot.sendMessage(chatId, '–û—Ç–∑—ã–≤—ã –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: https://t.me/annurreviews');
        } else if (q.data === 'leave_review') {
            
            await bot.sendMessage(chatId, '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –≤—ã –º–æ–∂–µ—Ç–µ –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ: https://t.me/annurreviews');
        } else if (q.data === 'back_to_start') {
            await editToMainMenu(chatId, messageId);
        } else if (q.data === 'back_to_regions') {
            await editToRegionMenu(chatId, messageId);
        } else if (q.data.startsWith('diamond_')) {
            const selectedItemIndex = q.data.split('_')[1];
            const diamondsData = selectedRegion === 'RU' ? diamondsDataRU : diamondsDataKG;
            const selectedItem = diamondsData[selectedItemIndex];

            waitingForAction[chatId] = {
                step: 'playerId',
                index: selectedItemIndex,
                region: selectedRegion,
                item: selectedItem
            };

            await bot.sendMessage(chatId, `–í—ã –≤—ã–±—Ä–∞–ª–∏ **${typeof selectedItem.amount === 'number' ? `${selectedItem.amount}üíé` : selectedItem.amount}** –∑–∞ **${selectedItem.price}** ${selectedRegion === 'RU' ? '‚ÇΩ' : 'KGS'}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ ID —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ MLBB:`, { parse_mode: 'Markdown' });
        
        } else if (q.data.startsWith('pay_transfer_')) {
            const [, , index] = q.data.split('_');
            const orderData = waitingForAction[chatId];
            const diamondsData = orderData.region === 'RU' ? diamondsDataRU : diamondsDataKG;
            const selectedItem = diamondsData[index];
            const currency = selectedRegion === 'RU' ? '‚ÇΩ' : 'KGS';
            
            waitingForAction[chatId].step = 'transfer_confirm';

            const paymentDetails = 
                `üì¢ **–í–ù–ò–ú–ê–ù–ò–ï! –ü–µ—Ä–µ–≤–æ–¥ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω (—Å—Ç—Ä–∞–Ω–∞ –°–ù–ì).**\n\n` +
                `–ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã: –µ—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ–π–¥–µ—Ç –ø–æ –Ω–µ–∑–∞–≤–∏—Å—è—â–∏–º –æ—Ç –Ω–∞—Å –ø—Ä–∏—á–∏–Ω–∞–º, –º—ã –Ω–µ —Å–º–æ–∂–µ–º –Ω–µ—Å—Ç–∏ –∑–∞ —ç—Ç–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å.\n` +
                `–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ. –° –ª—é–±–æ–≤—å—é, ANNUR DIAMONDS üíé\n\n` +
                `**–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${selectedItem.price} ${currency}**\n\n` +
                `**–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:**\n` +
                `**–ü–æ–ª—É—á–∞—Ç–µ–ª—å:** –ê—Å–∫–∞—Ä.–°\n` +
                `**Mbank:** +996707711770 / 4177490184319665\n` +
                `**–ë–∞–Ω–∫ –ö–æ–º–ø–∞–Ω—å–æ–Ω:** +996707711770 (–ø—Ä—è–º–æ–π –ø–µ—Ä–µ–≤–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞)\n` +
                `\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –≤ —ç—Ç–æ—Ç —á–∞—Ç.`;

            await bot.sendMessage(chatId, paymentDetails, { parse_mode: 'Markdown' });

        } else if (q.data.startsWith('pay_crypto_')) {
            const [, , index] = q.data.split('_');
            const orderData = waitingForAction[chatId];
            const diamondsData = orderData.region === 'RU' ? diamondsDataRU : diamondsDataKG;
            const selectedItem = diamondsData[index];
            const currency = selectedRegion === 'RU' ? 'RUB' : 'KGS';

            const userFirstName = q.from.first_name;
            const userUsername = q.from.username;

            try {
                const response = await axios.post('https://api.cryptocloud.plus/v1/invoice/create', {
                    shop_id: CRYPTOCLOUD_SHOP_ID,
                    amount: selectedItem.price,
                    currency: currency,
                    order_id: `order_${Date.now()}_${chatId}`,
                    payload: {
                        chatId: chatId,
                        username: userUsername || userFirstName,
                        playerId: orderData.playerId,
                        item: `${selectedItem.amount} ${currency}`
                    },
                    email: null
                }, {
                    headers: {
                        'Authorization': `Token ${CRYPTOCLOUD_API_KEY}`,
                        'Content-Type': 'application/json'
                    }
                });

                const paymentLink = response.data.result.link;
                
                const adminMessage =
                    `üì¢ **–ù–û–í–´–ô –ó–ê–ö–ê–ó**\n\n` +
                    `**–¢–æ–≤–∞—Ä:** ${typeof selectedItem.amount === 'number' ? `${selectedItem.amount}üíé` : selectedItem.amount}\n` +
                    `**–°—É–º–º–∞:** ${selectedItem.price} ${currency}\n` +
                    `**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** ${userUsername ? `@${userUsername}` : userFirstName}\n` +
                    `**ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:** ${q.from.id}\n` +
                    `**ID –∏–≥—Ä–æ–∫–∞ MLBB:** ${orderData.playerId}`;
                
                await bot.sendMessage(adminChatId, adminMessage, {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚úÖ –ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω', callback_data: `complete_order_${q.from.id}` }]
                        ]
                    }
                });

                await bot.sendMessage(
                    chatId,
                    `–ö –æ–ø–ª–∞—Ç–µ **${selectedItem.price} ${currency}**.\n\n` +
                    `–û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π —á–µ—Ä–µ–∑ CryptoCloud.`,
                    {
                        parse_mode: 'Markdown',
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: '–û–ø–ª–∞—Ç–∏—Ç—å ‚úÖ', url: paymentLink }],
                                [{ text: '–ù–∞–∑–∞–¥', callback_data: 'back_to_regions' }]
                            ]
                        }
                    }
                );
            } catch (e) {
                console.error('CryptoCloud API error:', e.response ? e.response.data : e.message);
                if (e.response) {
                    console.log('CryptoCloud detailed error:', e.response.data);
                }
                await bot.sendMessage(chatId, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            }
            
        } else if (q.data.startsWith('confirm_payment_')) {
            const userIdToConfirm = q.data.split('_')[2];
            await bot.sendMessage(userIdToConfirm, `‚úÖ **–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!** –ú—ã –ø–æ–ø–æ–ª–Ω–∏–º –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!`, { parse_mode: 'Markdown' });
            await bot.sendMessage(chatId, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.');

            const usersCollection = db.collection('users');
            const user = await usersCollection.findOne({ chatId: parseInt(userIdToConfirm) });
            let purchases = user ? user.purchases : 0;
            purchases++;

            await usersCollection.updateOne(
                { chatId: parseInt(userIdToConfirm) },
                { $set: { purchases: purchases, lastPurchase: new Date() } },
                { upsert: true }
            );

            if (purchases % 5 === 0) {
                await bot.sendMessage(parseInt(userIdToConfirm), `üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!** üéâ –í—ã —Å–æ–≤–µ—Ä—à–∏–ª–∏ ${purchases} –ø–æ–∫—É–ø–æ–∫ –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ –±–æ–Ω—É—Å ‚Äî **50 –±–æ–Ω—É—Å–Ω—ã—Ö –∞–ª–º–∞–∑–æ–≤!**`, { parse_mode: 'Markdown' });
            }

        
            await bot.sendMessage(chatId, '–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∏ –Ω–∞–∂–∞—Ç—å "–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω".', {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚úÖ –ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω', callback_data: `complete_order_${userIdToConfirm}` }]
                    ]
                }
            });

        } else if (q.data.startsWith('decline_payment_')) {
            const userIdToDecline = q.data.split('_')[2];
            await bot.sendMessage(userIdToDecline, '‚ùå **–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.** –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø–ª–∞—Ç–µ–∂–∞ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.', { parse_mode: 'Markdown' });
            await bot.sendMessage(chatId, '–û—Ç–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.');
        } else if (q.data.startsWith('complete_order_')) {
            const userIdToComplete = q.data.split('_')[2];
            await bot.sendMessage(userIdToComplete, `üéâ **–í–∞—à –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω!** üéâ\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –∏–≥—Ä–µ. –ï—Å–ª–∏ –≤–∞–º –≤—Å–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å, –±—É–¥–µ–º —Ä–∞–¥—ã –≤–∞—à–µ–º—É –æ—Ç–∑—ã–≤—É.`, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ ‚ù§Ô∏è', url: 'https://t.me/annurreviews' }]
                    ]
                }
            });
            await bot.sendMessage(chatId, '–°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.');
        }

        await bot.answerCallbackQuery(q.id);
    } catch (e) {
        console.error('callback error:', e);
    }
});

async function showMainMenu(chatId) {
    await bot.sendMessage(chatId, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: '–ö—É–ø–∏—Ç—å –∞–ª–º–∞–∑—ã üíé', callback_data: 'buy_diamonds' },
                    
                    { text: '–û—Ç–∑—ã–≤—ã üíñ', url: 'https://t.me/annurreviews' }
                ],
                
                [{ text: '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ üíå', url: 'https://t.me/annurreviews' }]
            ]
        }
    });
}

async function editToRegionMenu(chatId, messageId) {
    await bot.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:', {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
            inline_keyboard: [
                [
                    { text: 'üá∑üá∫ RU', callback_data: 'region_ru' },
                    { text: 'üá∞üá¨ KG', callback_data: 'region_kg' }
                ],
                [{ text: '–ù–∞–∑–∞–¥ üîô', callback_data: 'back_to_start' }]
            ],
        },
    });
}

async function editToDiamondsMenu(chatId, messageId) {
    const currency = selectedRegion === 'RU' ? '‚ÇΩ' : 'KGS';
    const diamondsData = selectedRegion === 'RU' ? diamondsDataRU : diamondsDataKG;
    const keyboard = [];
    let currentRow = [];

    diamondsData.forEach((d, index) => {
        const amountText = typeof d.amount === 'number' ? `${d.amount}üíé` : d.amount;
        
        currentRow.push({
            text: `${amountText} ‚Äî ${d.price.toLocaleString('ru-RU')} ${currency}`,
            callback_data: `diamond_${index}`
        });

        if (currentRow.length === 2 || index === diamondsData.length - 1) {
            keyboard.push(currentRow);
            currentRow = [];
        }
    });

    keyboard.push([{ text: '–ù–∞–∑–∞–¥ üîô', callback_data: 'back_to_regions' }]);

    await bot.editMessageText(`–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –∞–ª–º–∞–∑–æ–≤ (—Å–µ–π—á–∞—Å –≤—ã–±—Ä–∞–Ω —Ä–µ–≥–∏–æ–Ω: ${selectedRegion}):`, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: { inline_keyboard: keyboard },
    });
}

async function editToMainMenu(chatId, messageId) {
    await bot.editMessageText('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
            inline_keyboard: [
                [
                    { text: '–ö—É–ø–∏—Ç—å –∞–ª–º–∞–∑—ã üíé', callback_data: 'buy_diamonds' },
                    { text: '–û—Ç–∑—ã–≤—ã üíñ', url: 'https://t.me/annurreviews' }
                ],
                [{ text: '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ üíå', url: 'https://t.me/annurreviews' }]
            ]
        }
    });
}

app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
});
