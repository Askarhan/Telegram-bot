// ANNUR DIAMONDS Telegram Bot v2.0
// –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏

require('dotenv').config();
const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const { MongoClient } = require('mongodb');

// –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
const { DIAMONDS_DATA_RU, DIAMONDS_DATA_KG, LOYALTY_LEVELS } = require('./config/constants');
const logger = require('./utils/logger');
const Validators = require('./utils/validators');
const ReferralService = require('./services/referralService');
const PromoService = require('./services/promoService');
const BotHandlers = require('./handlers/botHandlers');

logger.info('üöÄ Starting ANNUR DIAMONDS Bot v2.0');

console.log('üîç Checking environment variables:');
console.log('TOKEN exists:', !!process.env.TOKEN);
console.log('MONGO_URI exists:', !!process.env.MONGO_URI);
console.log('CRYPTOCLOUD_API_KEY exists:', !!process.env.CRYPTOCLOUD_API_KEY);
console.log('WEBHOOK_URL:', process.env.WEBHOOK_URL || 'Not set (polling mode)');

const app = express();
app.use(express.json());

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const PORT = process.env.PORT || 3000;
const TOKEN = process.env.TOKEN;
const MONGO_URI = process.env.MONGO_URI;
const CRYPTOCLOUD_API_KEY = process.env.CRYPTOCLOUD_API_KEY;
const CRYPTOCLOUD_SHOP_ID = process.env.CRYPTOCLOUD_SHOP_ID;
const WEBHOOK_URL = process.env.WEBHOOK_URL;
const ADMIN_CHAT_ID = process.env.ADMIN_CHAT_ID || '895583535'; // Chat ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if (!TOKEN || !MONGO_URI || !CRYPTOCLOUD_API_KEY) {
    logger.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
    logger.error('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã: TOKEN, MONGO_URI, CRYPTOCLOUD_API_KEY');

    // –í —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –≤—ã—Ö–æ–¥–∞
    if (process.argv.includes('--test-mode')) {
        logger.warn('‚ö†Ô∏è –ó–∞–ø—É—Å–∫ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –±–µ–∑ –ø–æ–ª–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
    } else {
        process.exit(1);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
let bot;
if (TOKEN) {
    if (WEBHOOK_URL) {
        bot = new TelegramBot(TOKEN);
        logger.info('üîó Bot initialized in webhook mode');
    } else {
        bot = new TelegramBot(TOKEN, { polling: true });
        logger.info('üìä Bot initialized in polling mode');
    }
} else if (process.argv.includes('--test-mode')) {
    logger.warn('‚ö†Ô∏è Bot –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω - –Ω–µ—Ç TOKEN');
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let db = null;
let client = null;
let referralService = null;
let promoService = null;
let botHandlers = null;
let selectedRegion = 'RU';

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
async function connectToDatabase() {
    try {
        client = new MongoClient(MONGO_URI, {
            useUnifiedTopology: true,
            serverSelectionTimeoutMS: 5000,
        });
        await client.connect();
        db = client.db('telegram_bot');

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
        referralService = new ReferralService(db);
        promoService = new PromoService(db);
        botHandlers = new BotHandlers(bot, db, referralService, promoService);

        logger.info('‚úÖ Database connected successfully');
        return true;
    } catch (error) {
        logger.error('‚ùå Database connection failed:', error);
        return false;
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function escapeMarkdown(text) {
    // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
    return text.replace(/[_*[\]()~`>#+=|{}.!-]/g, '\\$&');
}

async function safeEditMessage(chatId, messageId, text, options = {}) {
    try {
        console.log('üîÑ Attempting to edit message:', { chatId, messageId, textLength: text.length });
        await bot.editMessageText(text, {
            chat_id: chatId,
            message_id: messageId,
            ...options
        });
        console.log('‚úÖ Message edited successfully');
    } catch (error) {
        console.log('‚ùå Error editing message:', error.message);
        if (error.code !== 'ETELEGRAM' || !error.response || error.response.body.error_code !== 400) {
            if (logger && logger.error) {
                logger.error('Error editing message:', error);
            }
        }
    }
}

async function deleteMessage(chatId, messageId) {
    try {
        await bot.deleteMessage(chatId, messageId);
    } catch (error) {
        logger.error('Error deleting message:', error);
    }
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async function showMainMenu(chatId, messageId = null) {
    const welcomeText =
        'üíé *ANNUR DIAMONDS*\n\n' +
        'üéÆ *Mobile Legends: Bang Bang*\n' +
        '‚ö° –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–ª–º–∞–∑–æ–≤\n' +
        'üîí –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏\n' +
        'üéÅ –ë–æ–Ω—É—Å—ã –∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã\n\n' +
        'üë• *–†–µ—Ñ–µ—Ä–∞–ª—ã* - –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π\n' +
        'üìä *–ò—Å—Ç–æ—Ä–∏—è* - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø–æ–∫—É–ø–∫–∏';

    const keyboard = [
        [{ text: 'üíé –ö—É–ø–∏—Ç—å –∞–ª–º–∞–∑—ã', callback_data: 'buy_diamonds' }],
        [
            { text: 'üë• –†–µ—Ñ–µ—Ä–∞–ª—ã', callback_data: 'referral_menu' },
            { text: 'üé´ –ü—Ä–æ–º–æ–∫–æ–¥', callback_data: 'promo_menu' }
        ],
        [{ text: 'üìä –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫', callback_data: 'purchase_history' }],
        [
            { text: 'üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞', url: `tg://user?id=${ADMIN_CHAT_ID}` },
            { text: 'üíñ –û—Ç–∑—ã–≤—ã', url: 'https://t.me/annurreviews' }
        ]
    ];

    const options = {
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: keyboard }
    };

    try {
        if (messageId) {
            await safeEditMessage(chatId, messageId, welcomeText, options);
        } else {
            await bot.sendMessage(chatId, welcomeText, options);
        }
    } catch (error) {
        logger.error('Error showing main menu:', error);
    }
}

// –ú–µ–Ω—é —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
async function showReferralMenu(chatId, messageId = null) {
    try {
        if (!referralService) {
            await bot.sendMessage(chatId, '‚ùå –°–µ—Ä–≤–∏—Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            return;
        }

        let stats = await referralService.getReferralStats(chatId);
        if (!stats) {
            await referralService.createReferralCode(chatId);
            stats = await referralService.getReferralStats(chatId);
        }

        const referralText =
            `üë• *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞*\n\n` +
            `üîó *–í–∞—à –∫–æ–¥:* \`${stats.referralCode}\`\n` +
            `üí∞ *–í–∞—à –±–æ–Ω—É—Å:* ${stats.currentBonus} –∞–ª–º–∞–∑–æ–≤\n` +
            `üë®‚Äçüë©‚Äçüëß‚Äçüë¶ *–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ:* ${stats.referralsCount} –¥—Ä—É–∑–µ–π\n` +
            `üìà *–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:* ${stats.totalEarned} –∞–ª–º–∞–∑–æ–≤\n\n` +
            `üéÅ *–£—Å–ª–æ–≤–∏—è:*\n` +
            `‚Ä¢ –î—Ä—É–≥ –ø–æ–ª—É—á–∞–µ—Ç —Å–∫–∏–¥–∫—É 5\\%\n` +
            `‚Ä¢ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 3\\% —Å –ø–æ–∫—É–ø–∫–∏\n` +
            `‚Ä¢ –ë–æ–Ω—É—Å—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ`;

        const keyboard = [
            [{ text: 'üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π', callback_data: 'share_referral' }],
            [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_start' }]
        ];

        const options = {
            parse_mode: 'Markdown',
            reply_markup: { inline_keyboard: keyboard }
        };

        if (messageId) {
            await safeEditMessage(chatId, messageId, referralText, options);
        } else {
            await bot.sendMessage(chatId, referralText, options);
        }

        if (logger && logger.userAction) {
            logger.userAction(chatId, 'referral_menu_viewed');
        }

    } catch (error) {
        logger.error('Error showing referral menu:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã');
    }
}

// –ú–µ–Ω—é –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
async function showPromoMenu(chatId, messageId = null) {
    try {
        if (!promoService) {
            await bot.sendMessage(chatId, '‚ùå –°–µ—Ä–≤–∏—Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            return;
        }

        // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const usersCollection = db.collection('users');
        const user = await usersCollection.findOne({ chatId: chatId });

        let promoText = `üé´ *–ü—Ä–æ–º–æ–∫–æ–¥—ã*\n\n`;

        if (!user || user.purchases === 0) {
            const welcomePromo = await promoService.createWelcomePromo(chatId);
            if (welcomePromo) {
                promoText += `üéÅ *–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤:*\n`;
                promoText += `\`${welcomePromo.code}\` - —Å–∫–∏–¥–∫–∞ ${welcomePromo.discount}%\n\n`;
            }
        }

        promoText += `üí° *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*\n`;
        promoText += `‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞\n`;
        promoText += `‚Ä¢ –°–∫–∏–¥–∫–∞ –ø—Ä–∏–º–µ–Ω–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n`;
        promoText += `‚Ä¢ –ü—Ä–æ–º–æ–∫–æ–¥—ã –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ\n\n`;
        promoText += `üîç *–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤—ã–º–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏ –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ!*`;

        const keyboard = [
            [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_start' }]
        ];

        const options = {
            parse_mode: 'Markdown',
            reply_markup: { inline_keyboard: keyboard }
        };

        if (messageId) {
            await safeEditMessage(chatId, messageId, promoText, options);
        } else {
            await bot.sendMessage(chatId, promoText, options);
        }

        if (logger && logger.userAction) {
            logger.userAction(chatId, 'promo_menu_viewed');
        }

    } catch (error) {
        logger.error('Error showing promo menu:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤');
    }
}

// –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫
async function showPurchaseHistory(chatId) {
    try {
        if (!db) {
            await bot.sendMessage(chatId, '‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
            return;
        }

        const usersCollection = db.collection('users');
        const user = await usersCollection.findOne({ chatId: chatId });
        const purchases = (user && user.purchases) ? user.purchases : 0;
        const totalSpent = (user && user.totalSpent) ? user.totalSpent : 0;
        const lastPurchase = (user && user.lastPurchase) ? user.lastPurchase : null;

        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        let referralStats = null;
        if (referralService) {
            try {
                referralStats = await referralService.getReferralStats(chatId);
            } catch (error) {
                logger.error('Error getting referral stats', error);
            }
        }

        let historyText = `üìä *–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫*\n\n`;
        historyText += `üë§ *–ü–æ–∫—É–ø–∫–∏:* ${purchases}\n`;
        historyText += `üí∞ *–ü–æ—Ç—Ä–∞—á–µ–Ω–æ:* ${totalSpent.toFixed(2)}\n`;

        if (referralStats && referralStats.currentBonus !== undefined) {
            historyText += `üíé *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã:* ${referralStats.currentBonus}\n`;
        }

        if (purchases === 0) {
            historyText += `üíé *–°—Ç–∞—Ç—É—Å:* –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç\n\n`;
            historyText += `üåü –°–æ–≤–µ—Ä—à–∏—Ç–µ –ø–æ–∫—É–ø–∫—É –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å—ã\\!\n`;
        } else {
            const untilBonus = 5 - (purchases % 5);
            const bonusesReceived = Math.floor(purchases / 5);

            historyText += `üéÅ *–ë–æ–Ω—É—Å–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ:* ${bonusesReceived}\n`;
            if (untilBonus === 5) {
                historyText += `‚ú® *–ì–æ—Ç–æ–≤ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é –±–æ–Ω—É—Å–∞\\!*\n`;
            } else {
                historyText += `‚è≥ *–î–æ –±–æ–Ω—É—Å–∞:* ${untilBonus} –ø–æ–∫—É–ø–æ–∫\n`;
            }

            if (lastPurchase && lastPurchase instanceof Date) {
                historyText += `üìÖ *–ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–∫—É–ø–∫–∞:* ${lastPurchase.toLocaleDateString('ru-RU')}\n`;
            } else if (lastPurchase && typeof lastPurchase === 'string') {
                historyText += `üìÖ *–ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–∫—É–ø–∫–∞:* ${new Date(lastPurchase).toLocaleDateString('ru-RU')}\n`;
            }
        }

        // –£—Ä–æ–≤–µ–Ω—å –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
        let loyaltyLevel = '';
        if (purchases >= 50) loyaltyLevel = 'üëë –õ–µ–≥–µ–Ω–¥–∞';
        else if (purchases >= 20) loyaltyLevel = 'üíé VIP –∫–ª–∏–µ–Ω—Ç';
        else if (purchases >= 10) loyaltyLevel = '‚≠ê –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç';
        else if (purchases >= 5) loyaltyLevel = 'üî• –ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å';
        else if (purchases >= 1) loyaltyLevel = 'üå± –ù–æ–≤–∏—á–æ–∫';
        else loyaltyLevel = 'üëã –ì–æ—Å—Ç—å';

        historyText += `\n${loyaltyLevel}`;

        const keyboard = [
            [{ text: 'üíé –ö—É–ø–∏—Ç—å –∞–ª–º–∞–∑—ã', callback_data: 'buy_diamonds' }],
            [{ text: 'üë• –†–µ—Ñ–µ—Ä–∞–ª—ã', callback_data: 'referral_menu' }],
            [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_start' }]
        ];

        await bot.sendMessage(chatId, historyText, {
            parse_mode: 'Markdown',
            reply_markup: { inline_keyboard: keyboard }
        });

        if (logger && logger.userAction) {
            logger.userAction(chatId, 'purchase_history_viewed');
        }

    } catch (error) {
        if (logger && logger.error) {
            logger.error('Error showing purchase history:', error);
        } else {
            console.error('Error showing purchase history:', error);
        }

        if (bot && bot.sendMessage) {
            await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫');
        }
    }
}

// –ú–µ–Ω—é —Ä–µ–≥–∏–æ–Ω–æ–≤
async function showRegionMenu(chatId, messageId = null) {
    const regionText =
        'üåç *–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏–æ–Ω*\n\n' +
        'üá∑üá∫ *–†–æ—Å—Å–∏—è* - –ø–µ—Ä–µ–≤–æ–¥—ã, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞\n' +
        'üá∞üá¨ *–ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω* - O! –î–µ–Ω—å–≥–∏, Balance.kg\n\n' +
        'üí° –û—Ç —Ä–µ–≥–∏–æ–Ω–∞ –∑–∞–≤–∏—Å—è—Ç —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã –∏ —Ü–µ–Ω—ã';

    const keyboard = [
        [
            { text: 'üá∑üá∫ –†–æ—Å—Å–∏—è', callback_data: 'region_ru' },
            { text: 'üá∞üá¨ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω', callback_data: 'region_kg' }
        ],
        [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_start' }]
    ];

    const options = {
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: keyboard }
    };

    try {
        if (messageId) {
            await safeEditMessage(chatId, messageId, regionText, options);
        } else {
            await bot.sendMessage(chatId, regionText, options);
        }
    } catch (error) {
        logger.error('Error showing region menu:', error);
    }
}

// –ú–µ–Ω—é –∞–ª–º–∞–∑–æ–≤
async function showDiamondsMenu(chatId, messageId = null) {
    try {
        const currency = selectedRegion === 'RU' ? '‚ÇΩ' : 'KGS';
        const diamondsData = selectedRegion === 'RU' ? DIAMONDS_DATA_RU : DIAMONDS_DATA_KG;
        const keyboard = [];
        let currentRow = [];

        diamondsData.forEach((d, index) => {
            const amountText = typeof d.amount === 'number' ? `${d.amount}üíé` : d.amount;

            currentRow.push({
                text: `${amountText} ‚Äî ${d.price.toLocaleString('ru-RU')} ${currency}`,
                callback_data: `diamond_${index}`
            });

            if (currentRow.length === 2 || index === diamondsData.length - 1) {
                keyboard.push(currentRow);
                currentRow = [];
            }
        });

        keyboard.push([{ text: 'üîô –ö –≤—ã–±–æ—Ä—É —Ä–µ–≥–∏–æ–Ω–∞', callback_data: 'back_to_regions' }]);

        const menuText =
            `üíé *–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –∞–ª–º–∞–∑–æ–≤*\n\n` +
            `üìç *–†–µ–≥–∏–æ–Ω:* ${selectedRegion === 'RU' ? 'üá∑üá∫ –†–æ—Å—Å–∏—è' : 'üá∞üá¨ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω'}\n` +
            `üí∞ *–í–∞–ª—é—Ç–∞:* ${currency}\n\n` +
            `üí° *–ü–æ–¥—Å–∫–∞–∑–∫–∞:* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –¥–ª—è —Å–∫–∏–¥–∫–∏!`;

        const options = {
            parse_mode: 'Markdown',
            reply_markup: { inline_keyboard: keyboard }
        };

        if (messageId) {
            await safeEditMessage(chatId, messageId, menuText, options);
        } else {
            await bot.sendMessage(chatId, menuText, options);
        }

        if (logger && logger.userAction) {
            logger.userAction(chatId, 'diamonds_menu_viewed', { region: selectedRegion });
        }

    } catch (error) {
        logger.error('Error showing diamonds menu', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ –∞–ª–º–∞–∑–æ–≤');
    }
}

// –§–æ—Ä–º–∞ –∑–∞–∫–∞–∑–∞
async function showOrderForm(chatId, messageId, diamondIndex) {
    try {
        const diamondsData = selectedRegion === 'RU' ? DIAMONDS_DATA_RU : DIAMONDS_DATA_KG;
        const selectedDiamond = diamondsData[diamondIndex];

        if (!selectedDiamond) {
            await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –ø–∞–∫–µ—Ç–∞ –∞–ª–º–∞–∑–æ–≤');
            return;
        }

        const currency = selectedRegion === 'RU' ? '‚ÇΩ' : 'KGS';
        const amountText = typeof selectedDiamond.amount === 'number'
            ? `${selectedDiamond.amount} üíé`
            : selectedDiamond.amount;

        const orderText =
            `üõí *–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞*\n\n` +
            `üíé *–¢–æ–≤–∞—Ä:* ${amountText}\n` +
            `üí∞ *–¶–µ–Ω–∞:* ${selectedDiamond.price.toLocaleString('ru-RU')} ${currency}\n` +
            `üåç *–†–µ–≥–∏–æ–Ω:* ${selectedRegion === 'RU' ? 'üá∑üá∫ –†–æ—Å—Å–∏—è' : 'üá∞üá¨ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω'}\n\n` +
            `üìù *–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤–≤–µ–¥–∏—Ç–µ:*\n` +
            `‚Ä¢ ID –∏–≥—Ä–æ–∫–∞ (—Ü–∏—Ñ—Ä—ã, —Å–∫–æ–±–∫–∏, –ø—Ä–æ–±–µ–ª—ã)\n` +
            `‚Ä¢ Server ID (—Ü–∏—Ñ—Ä—ã, —Å–∫–æ–±–∫–∏, –ø—Ä–æ–±–µ–ª—ã)\n` +
            `‚Ä¢ –ü—Ä–æ–º–æ–∫–æ–¥ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n\n` +
            `*–§–æ—Ä–º–∞—Ç:* \`ID SERVER –ü–†–û–ú–û–ö–û–î\`\n` +
            `*–ü—Ä–∏–º–µ—Ä—ã:* \`123456789 1234 WELCOME10\`\n` +
            `\`1121312 (2312) PROMO5\`\n\n` +
            `üí° –ü—Ä–æ–º–æ–∫–æ–¥ –º–æ–∂–Ω–æ –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å`;

        const keyboard = [
            [{ text: 'üîô –ö –≤—ã–±–æ—Ä—É –∞–ª–º–∞–∑–æ–≤', callback_data: 'back_to_diamonds' }],
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_start' }]
        ];

        const options = {
            parse_mode: 'Markdown',
            reply_markup: { inline_keyboard: keyboard }
        };

        if (messageId) {
            await safeEditMessage(chatId, messageId, orderText, options);
        } else {
            await bot.sendMessage(chatId, orderText, options);
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (!global.userOrders) global.userOrders = {};
        global.userOrders[chatId] = {
            diamondIndex,
            region: selectedRegion,
            diamond: selectedDiamond,
            timestamp: new Date()
        };

        if (logger && logger.userAction) {
            logger.userAction(chatId, 'order_form_shown', {
                diamondIndex,
                amount: selectedDiamond.amount,
                price: selectedDiamond.price,
                region: selectedRegion
            });
        }

    } catch (error) {
        if (logger && logger.error) {
            logger.error('Error showing order form:', error);
        }
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–æ—Ä–º—ã –∑–∞–∫–∞–∑–∞');
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
async function processOrderInput(chatId, text) {
    try {
        const orderInfo = global.userOrders[chatId];
        if (!orderInfo) {
            await bot.sendMessage(chatId, '‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.');
            return;
        }

        // –ü–∞—Ä—Å–∏–º –≤–≤–æ–¥: ID SERVER –ü–†–û–ú–û–ö–û–î
        const parts = text.trim().split(/\s+/);
        if (parts.length < 2) {
            await bot.sendMessage(chatId,
                '‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç\\!*\n\n' +
                '–£–∫–∞–∂–∏—Ç–µ –∫–∞–∫ –º–∏–Ω–∏–º—É–º:\n' +
                '‚Ä¢ ID –∏–≥—Ä–æ–∫–∞\n' +
                '‚Ä¢ Server ID\n\n' +
                '*–ü—Ä–∏–º–µ—Ä:* `123456789 1234`',
                { parse_mode: 'Markdown' }
            );
            return;
        }

        const playerId = parts[0];
        const serverId = parts[1];
        const promoCode = parts[2] || null;

        // –í–∞–ª–∏–¥–∞—Ü–∏—è ID (—Ä–∞–∑—Ä–µ—à–∞–µ–º —Ü–∏—Ñ—Ä—ã, —Å–∫–æ–±–∫–∏ –∏ –ø—Ä–æ–±–µ–ª—ã)
        if (!/^[\d\s\(\)]+$/.test(playerId) || !/^[\d\s\(\)]+$/.test(serverId)) {
            await bot.sendMessage(chatId,
                '‚ùå *ID –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, —Å–∫–æ–±–∫–∏ –∏ –ø—Ä–æ–±–µ–ª—ã\\!*\n\n' +
                'Player ID –∏ Server ID –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–∏—Ñ—Ä—ã, —Å–∫–æ–±–∫–∏ \\(\\) –∏ –ø—Ä–æ–±–µ–ª—ã\\.\n' +
                '*–ü—Ä–∏–º–µ—Ä—ã:* `123456789 1234` –∏–ª–∏ `1121312 (2312)`',
                { parse_mode: 'Markdown' }
            );
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        let discount = 0;
        let discountAmount = 0;
        let promoValid = false;

        if (promoCode && promoService) {
            try {
                const promoResult = await promoService.validatePromo(promoCode, chatId);
                if (promoResult.valid) {
                    discount = promoResult.discount;
                    discountAmount = Math.round(orderInfo.diamond.price * discount / 100);
                    promoValid = true;
                }
            } catch (error) {
                if (logger && logger.error) {
                    logger.error('Error validating promo code:', error);
                }
            }
        }

        // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        await createPaymentOrder(chatId, {
            ...orderInfo,
            playerId,
            serverId,
            promoCode,
            discount,
            discountAmount,
            promoValid
        });

    } catch (error) {
        if (logger && logger.error) {
            logger.error('Error processing order input:', error);
        }
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞');
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
async function createPaymentOrder(chatId, orderData) {
    try {
        const finalPrice = orderData.diamond.price - orderData.discountAmount;
        const currency = orderData.region === 'RU' ? 'RUB' : 'KGS';
        const amountText = typeof orderData.diamond.amount === 'number'
            ? `${orderData.diamond.amount} üíé`
            : orderData.diamond.amount;

        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        let confirmText = `‚úÖ *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞*\n\n`;
        confirmText += `üíé *–¢–æ–≤–∞—Ä:* ${amountText}\n`;
        confirmText += `üë§ *Player ID:* ${orderData.playerId}\n`;
        confirmText += `üåê *Server ID:* ${orderData.serverId}\n`;
        confirmText += `üåç *–†–µ–≥–∏–æ–Ω:* ${orderData.region === 'RU' ? 'üá∑üá∫ –†–æ—Å—Å–∏—è' : 'üá∞üá¨ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω'}\n\n`;

        if (orderData.promoValid) {
            confirmText += `üé´ *–ü—Ä–æ–º–æ–∫–æ–¥:* ${orderData.promoCode} (-${orderData.discount}\\%)\n`;
            confirmText += `üí∞ *–¶–µ–Ω–∞:* ~~${orderData.diamond.price}~~ ‚Üí *${finalPrice}* ${currency}\n`;
            confirmText += `üí∏ *–°–∫–∏–¥–∫–∞:* ${orderData.discountAmount} ${currency}\n\n`;
        } else {
            confirmText += `üí∞ *–¶–µ–Ω–∞:* ${finalPrice} ${currency}\n\n`;
            if (orderData.promoCode) {
                confirmText += `‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ \\"${orderData.promoCode}\\" –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω\n\n`;
            }
        }

        confirmText += `üí≥ *–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:*\n`;
        confirmText += `‚è∞ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: 5\\-15 –º–∏–Ω—É—Ç\n`;
        confirmText += `‚ú® –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ –∞–ª–º–∞–∑–æ–≤`;

        // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–∫–∞–∑–∞
        const orderId = `${chatId}_${Date.now()}`;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
        let keyboard = [];

        if (orderData.region === 'RU') {
            // –†–æ—Å—Å–∏—è: –ø–µ—Ä–µ–≤–æ–¥, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞
            keyboard = [
                [{ text: 'üí∞ –ü–µ—Ä–µ–≤–æ–¥ (–ö–æ–º–ø–∞–Ω—å–æ–Ω)', callback_data: `pay_transfer_${orderId}` }],
                [{ text: '‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞', callback_data: `pay_crypto_${orderId}` }],
                [
                    { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel_order' },
                    { text: 'üîô –ò–∑–º–µ–Ω–∏—Ç—å', callback_data: 'back_to_diamonds' }
                ]
            ];
        } else {
            // –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω: O! –î–µ–Ω—å–≥–∏, Balance.kg
            keyboard = [
                [{ text: 'üì± O! –î–µ–Ω—å–≥–∏', callback_data: `pay_odengi_${orderId}` }],
                [{ text: 'üí∞ Balance.kg', callback_data: `pay_balance_${orderId}` }],
                [
                    { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel_order' },
                    { text: 'üîô –ò–∑–º–µ–Ω–∏—Ç—å', callback_data: 'back_to_diamonds' }
                ]
            ];
        }

        await bot.sendMessage(chatId, confirmText, {
            parse_mode: 'Markdown',
            reply_markup: { inline_keyboard: keyboard }
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if (db) {
            const ordersCollection = db.collection('orders');
            await ordersCollection.insertOne({
                chatId,
                orderId: orderId,
                diamond: orderData.diamond,
                playerId: orderData.playerId,
                serverId: orderData.serverId,
                region: orderData.region,
                originalPrice: orderData.diamond.price,
                finalPrice,
                currency,
                promoCode: orderData.promoCode,
                discount: orderData.discount,
                discountAmount: orderData.discountAmount,
                status: 'awaiting_payment',
                createdAt: new Date()
            });
        }

        // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
        if (global.userOrders && global.userOrders[chatId]) {
            delete global.userOrders[chatId];
        }

        if (logger && logger.userAction) {
            logger.userAction(chatId, 'payment_methods_shown', {
                orderId: orderId,
                amount: amountText,
                finalPrice,
                region: orderData.region,
                promoUsed: orderData.promoValid
            });
        }

    } catch (error) {
        if (logger && logger.error) {
            logger.error('Error creating payment order:', error);
        }
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É');
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
async function handlePaymentMethod(chatId, messageId, paymentData) {
    try {
        console.log('üîç handlePaymentMethod called:', { chatId, paymentData });

        const parts = paymentData.split('_');
        const paymentMethod = parts[1]; // transfer, crypto, odengi, balance
        const orderId = parts.slice(2).join('_'); // ID –∑–∞–∫–∞–∑–∞

        console.log('üìä Parsed payment data:', { paymentMethod, orderId });

        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if (!db) {
            console.log('‚ùå Database not available');
            await bot.sendMessage(chatId, '‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
            return;
        }

        const ordersCollection = db.collection('orders');
        const order = await ordersCollection.findOne({ orderId: orderId, chatId: chatId });

        console.log('üîç Order lookup result:', { found: !!order, orderId, chatId });

        if (!order) {
            console.log('‚ùå Order not found in database');
            await bot.sendMessage(chatId, '‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }


        let paymentText = '';
        let paymentInstructions = '';
        let keyboard = [];

        switch (paymentMethod) {
            case 'transfer':
                paymentText = `üí∞ *–ü–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ –ö–æ–º–ø–∞–Ω—å–æ–Ω –ë–∞–Ω–∫*\n\n`;
                paymentText += `üí∞ *–ö –æ–ø–ª–∞—Ç–µ:* ${order.finalPrice} ${order.currency}\n`;
                paymentText += `üîó *–ó–∞–∫–∞–∑:* ${orderId}\n\n`;
                paymentInstructions = `üìù *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*\n`;
                paymentInstructions += `1\\. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ ${order.finalPrice} ${order.currency} –Ω–∞ –Ω–æ–º–µ—Ä:\n`;
                paymentInstructions += `üìû \`+996 707 711 770\` (–ö–æ–º–ø–∞–Ω—å–æ–Ω –ë–∞–Ω–∫)\n`;
                paymentInstructions += `2\\. –í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —É–∫–∞–∂–∏—Ç–µ: \`${orderId}\`\n`;
                paymentInstructions += `3\\. –ù–∞–∂–º–∏—Ç–µ "–Ø –æ–ø–ª–∞—Ç–∏–ª" –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç\n\n`;
                paymentInstructions += `‚è∞ –ê–ª–º–∞–∑—ã –ø–æ—Å—Ç—É–ø—è—Ç –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º`;

                keyboard = [
                    [{ text: '‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª', callback_data: `paid_${orderId}` }],
                    [{ text: 'üì± –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º', url: `tg://user?id=${ADMIN_CHAT_ID}` }],
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_diamonds' }]
                ];
                break;

            case 'crypto':
                paymentText = `‚Çø *–û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π*\n\n`;
                paymentText += `üí∞ *–ö –æ–ø–ª–∞—Ç–µ:* ${order.finalPrice} ${order.currency}\n`;
                paymentText += `üîó *–ó–∞–∫–∞–∑:* ${orderId}\n\n`;
                paymentInstructions = `üìù *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*\n`;
                paymentInstructions += `1\\. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç ${order.finalPrice} ${order.currency} –≤ USDT\n`;
                paymentInstructions += `üíé –ê–¥—Ä–µ—Å: \`TQn9Y2khEsLJqKTtKx5YYY123example\`\n`;
                paymentInstructions += `2\\. –í memo —É–∫–∞–∂–∏—Ç–µ: \`${orderId}\`\n`;
                paymentInstructions += `3\\. –ù–∞–∂–º–∏—Ç–µ "–Ø –æ–ø–ª–∞—Ç–∏–ª" –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç\n\n`;
                paymentInstructions += `‚è∞ –ê–ª–º–∞–∑—ã –ø–æ—Å—Ç—É–ø—è—Ç –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º`;

                keyboard = [
                    [{ text: '‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª', callback_data: `paid_${orderId}` }],
                    [{ text: 'üì± –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º', url: `tg://user?id=${ADMIN_CHAT_ID}` }],
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_diamonds' }]
                ];
                break;

            case 'odengi':
                paymentText = `üì± *–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ O! –î–µ–Ω—å–≥–∏*\n\n`;
                paymentText += `üí∞ *–ö –æ–ø–ª–∞—Ç–µ:* ${order.finalPrice} ${order.currency}\n`;
                paymentText += `üîó *–ó–∞–∫–∞–∑:* ${orderId}\n\n`;
                paymentInstructions = `üìù *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*\n`;
                paymentInstructions += `1\\. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ ${order.finalPrice} ${order.currency} –Ω–∞ –Ω–æ–º–µ—Ä:\n`;
                paymentInstructions += `üìû \`+996 707 711 770\` (O! –î–µ–Ω—å–≥–∏)\n`;
                paymentInstructions += `2\\. –í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —É–∫–∞–∂–∏—Ç–µ: \`${orderId}\`\n`;
                paymentInstructions += `3\\. –ù–∞–∂–º–∏—Ç–µ "–Ø –æ–ø–ª–∞—Ç–∏–ª" –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç\n\n`;
                paymentInstructions += `‚è∞ –ê–ª–º–∞–∑—ã –ø–æ—Å—Ç—É–ø—è—Ç –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º`;

                keyboard = [
                    [{ text: '‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª', callback_data: `paid_${orderId}` }],
                    [{ text: 'üì± –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º', url: `tg://user?id=${ADMIN_CHAT_ID}` }],
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_diamonds' }]
                ];
                break;

            case 'balance':
                paymentText = `üí∞ *–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Balance\\.kg*\n\n`;
                paymentText += `üí∞ *–ö –æ–ø–ª–∞—Ç–µ:* ${order.finalPrice} ${order.currency}\n`;
                paymentText += `üîó *–ó–∞–∫–∞–∑:* ${orderId}\n\n`;
                paymentInstructions = `üìù *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*\n`;
                paymentInstructions += `1\\. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ ${order.finalPrice} ${order.currency} –Ω–∞ –Ω–æ–º–µ—Ä:\n`;
                paymentInstructions += `üìû \`+996 221 577 629\` (Balance.kg)\n`;
                paymentInstructions += `2\\. –í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —É–∫–∞–∂–∏—Ç–µ: \`${orderId}\`\n`;
                paymentInstructions += `3\\. –ù–∞–∂–º–∏—Ç–µ "–Ø –æ–ø–ª–∞—Ç–∏–ª" –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç\n\n`;
                paymentInstructions += `‚è∞ –ê–ª–º–∞–∑—ã –ø–æ—Å—Ç—É–ø—è—Ç –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º`;

                keyboard = [
                    [{ text: '‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª', callback_data: `paid_${orderId}` }],
                    [{ text: 'üì± –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º', url: `tg://user?id=${ADMIN_CHAT_ID}` }],
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_diamonds' }]
                ];
                break;

            default:
                await bot.sendMessage(chatId, '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã');
                return;
        }

        const fullText = paymentText + paymentInstructions;

        console.log('üìù Sending payment instructions for method:', paymentMethod);
        console.log('üí¨ Message length:', fullText.length);

        await safeEditMessage(chatId, messageId, fullText, {
            parse_mode: 'Markdown',
            reply_markup: { inline_keyboard: keyboard }
        });

        console.log('‚úÖ Payment instructions sent successfully');

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        await ordersCollection.updateOne(
            { orderId: orderId },
            {
                $set: {
                    status: 'payment_instructions_sent',
                    paymentMethod: paymentMethod,
                    updatedAt: new Date()
                }
            }
        );

        if (logger && logger.userAction) {
            logger.userAction(chatId, 'payment_method_selected', {
                orderId,
                method: paymentMethod,
                amount: order.finalPrice
            });
        }

    } catch (error) {
        if (logger && logger.error) {
            logger.error('Error handling payment method:', error);
        }
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã');
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∫–ª–∏–µ–Ω—Ç–æ–º
async function handlePaymentConfirmation(chatId, messageId, callbackData) {
    try {
        const orderId = callbackData.replace('paid_', '');

        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if (!db) {
            await bot.sendMessage(chatId, '‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
            return;
        }

        const ordersCollection = db.collection('orders');
        const order = await ordersCollection.findOne({ orderId: orderId, chatId: chatId });

        if (!order) {
            await bot.sendMessage(chatId, '‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        if (order.status !== 'payment_instructions_sent') {
            await bot.sendMessage(chatId, '‚ùå –ó–∞–∫–∞–∑ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω');
            return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        await ordersCollection.updateOne(
            { orderId: orderId },
            {
                $set: {
                    status: 'payment_claimed',
                    claimedAt: new Date()
                }
            }
        );

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∫–ª–∏–µ–Ω—Ç—É
        const confirmText =
            `‚úÖ *–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π*\n\n` +
            `üîó *–ó–∞–∫–∞–∑:* ${orderId}\n` +
            `üí∞ *–°—É–º–º–∞:* ${order.finalPrice} ${order.currency}\n\n` +
            `üì∏ *–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã:*\n` +
            `‚Ä¢ –°–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞/–ø–µ—Ä–µ–≤–æ–¥–∞\n` +
            `‚Ä¢ –ß–µ—Ç–∫–æ –≤–∏–¥–Ω—ã —Å—É–º–º–∞ –∏ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞\n` +
            `‚Ä¢ –û–¥–∏–Ω —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n\n` +
            `‚è∞ –ê–¥–º–∏–Ω –ø—Ä–æ–≤–µ—Ä–∏—Ç –ø–ª–∞—Ç–µ–∂ –∏ –∑–∞—á–∏—Å–ª–∏—Ç –∞–ª–º–∞–∑—ã`;

        const keyboard = [
            [{ text: 'üì± –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º', url: `tg://user?id=${ADMIN_CHAT_ID}` }],
            [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_start' }]
        ];

        await safeEditMessage(chatId, messageId, confirmText, {
            parse_mode: 'Markdown',
            reply_markup: { inline_keyboard: keyboard }
        });

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        if (!global.awaitingScreenshots) global.awaitingScreenshots = {};
        global.awaitingScreenshots[chatId] = {
            orderId: orderId,
            order: order,
            timestamp: new Date()
        };

        if (logger && logger.userAction) {
            logger.userAction(chatId, 'payment_claimed', {
                orderId,
                amount: order.finalPrice,
                method: order.paymentMethod
            });
        }

    } catch (error) {
        if (logger && logger.error) {
            logger.error('Error handling payment confirmation:', error);
        }
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã');
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –æ–ø–ª–∞—Ç—ã
async function processPaymentScreenshot(msg) {
    try {
        const chatId = msg.chat.id;
        const screenshotInfo = global.awaitingScreenshots[chatId];

        if (!screenshotInfo) {
            await bot.sendMessage(chatId, '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞');
            return;
        }

        const { orderId, order } = screenshotInfo;

        // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        const photo = msg.photo[msg.photo.length - 1]; // –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
        const fileId = photo.file_id;

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if (db) {
            const ordersCollection = db.collection('orders');
            await ordersCollection.updateOne(
                { orderId: orderId },
                {
                    $set: {
                        status: 'screenshot_uploaded',
                        screenshotFileId: fileId,
                        screenshotUploadedAt: new Date()
                    }
                }
            );
        }

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        await bot.sendMessage(chatId,
            `‚úÖ *–°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω\\!*\n\n` +
            `üîó *–ó–∞–∫–∞–∑:* ${orderId}\n` +
            `‚è∞ –ê–¥–º–∏–Ω –ø—Ä–æ–≤–µ—Ä–∏—Ç –ø–ª–∞—Ç–µ–∂ –∏ –∑–∞—á–∏—Å–ª–∏—Ç –∞–ª–º–∞–∑—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç\n\n` +
            `üì± –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∞–¥–º–∏–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏`,
            { parse_mode: 'Markdown' }
        );

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞ –∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º
        await sendAdminNotification(order, fileId, msg.from);

        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        delete global.awaitingScreenshots[chatId];

        if (logger && logger.userAction) {
            logger.userAction(chatId, 'screenshot_uploaded', {
                orderId,
                fileId
            });
        }

    } catch (error) {
        if (logger && logger.error) {
            logger.error('Error processing payment screenshot:', error);
        }
        await bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞');
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É
async function sendAdminNotification(order, screenshotFileId, userInfo) {
    try {
        const amountText = typeof order.diamond.amount === 'number'
            ? `${order.diamond.amount} üíé`
            : order.diamond.amount;

        let adminText = `üîî *–ù–û–í–´–ô –ü–õ–ê–¢–ï–ñ*\n\n`;
        adminText += `üë§ *–ö–ª–∏–µ–Ω—Ç:* ${userInfo.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} ${userInfo.last_name || ''}`;
        if (userInfo.username) {
            adminText += ` (@${userInfo.username})`;
        }
        adminText += `\n`;
        adminText += `üí¨ *Chat ID:* ${order.chatId}\n\n`;
        adminText += `üîó *–ó–∞–∫–∞–∑:* \`${order.orderId}\`\n`;
        adminText += `üíé *–¢–æ–≤–∞—Ä:* ${amountText}\n`;
        adminText += `üë§ *Player ID:* \`${order.playerId}\`\n`;
        adminText += `üåê *Server ID:* \`${order.serverId}\`\n`;
        adminText += `üåç *–†–µ–≥–∏–æ–Ω:* ${order.region === 'RU' ? 'üá∑üá∫ –†–æ—Å—Å–∏—è' : 'üá∞üá¨ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω'}\n`;
        adminText += `üí≥ *–°–ø–æ—Å–æ–±:* ${getPaymentMethodName(order.paymentMethod)}\n`;
        adminText += `üí∞ *–°—É–º–º–∞:* ${order.finalPrice} ${order.currency}\n`;

        if (order.promoCode) {
            adminText += `üé´ *–ü—Ä–æ–º–æ–∫–æ–¥:* ${order.promoCode} (-${order.discount}%)\n`;
        }

        const keyboard = [
            [
                { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: `confirm_${order.orderId}` },
                { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_${order.orderId}` }
            ],
            [{ text: 'üì± –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É', url: `tg://user?id=${order.chatId}` }]
        ];

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞
        await bot.sendPhoto(ADMIN_CHAT_ID, screenshotFileId, {
            caption: adminText,
            parse_mode: 'Markdown',
            reply_markup: { inline_keyboard: keyboard }
        });

        if (logger && logger.userAction) {
            logger.userAction(ADMIN_CHAT_ID, 'admin_notification_sent', {
                orderId: order.orderId,
                clientId: order.chatId,
                amount: order.finalPrice
            });
        }

    } catch (error) {
        if (logger && logger.error) {
            logger.error('Error sending admin notification:', error);
        }
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
function getPaymentMethodName(method) {
    switch (method) {
        case 'transfer': return '–ö–æ–º–ø–∞–Ω—å–æ–Ω –ë–∞–Ω–∫';
        case 'crypto': return '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞';
        case 'odengi': return 'O! –î–µ–Ω—å–≥–∏';
        case 'balance': return 'Balance.kg';
        default: return method;
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ)
async function handleAdminDecision(chatId, messageId, callbackData) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
        if (chatId.toString() !== ADMIN_CHAT_ID) {
            await bot.answerCallbackQuery(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
            return;
        }

        const isConfirm = callbackData.startsWith('confirm_');
        const orderId = callbackData.replace(isConfirm ? 'confirm_' : 'reject_', '');

        if (!db) {
            await bot.sendMessage(chatId, '‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
            return;
        }

        const ordersCollection = db.collection('orders');
        const order = await ordersCollection.findOne({ orderId: orderId });

        if (!order) {
            await bot.sendMessage(chatId, '‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        if (order.status !== 'screenshot_uploaded') {
            await bot.sendMessage(chatId, '‚ùå –ó–∞–∫–∞–∑ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å');
            return;
        }

        const clientChatId = order.chatId;
        let clientMessage = '';
        let adminMessage = '';
        let newStatus = '';

        if (isConfirm) {
            // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
            newStatus = 'confirmed';
            adminMessage = `‚úÖ *–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω*\n\n–ó–∞–∫–∞–∑: \`${orderId}\`\n–ê–ª–º–∞–∑—ã –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –≤ –∏–≥—Ä—É`;

            const amountText = typeof order.diamond.amount === 'number'
                ? `${order.diamond.amount} üíé`
                : order.diamond.amount;

            clientMessage =
                `üéâ *–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω\\!*\n\n` +
                `üíé *–¢–æ–≤–∞—Ä:* ${amountText}\n` +
                `üë§ *Player ID:* ${order.playerId}\n` +
                `üåê *Server ID:* ${order.serverId}\n\n` +
                `‚ú® –ê–ª–º–∞–∑—ã –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 5\\-15 –º–∏–Ω—É—Ç\\!\n` +
                `üì± –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω—É`;

            // –ù–∞—á–∏—Å–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã
            if (referralService) {
                try {
                    await referralService.processReferralBonus(clientChatId, order.originalPrice);
                } catch (error) {
                    if (logger && logger.error) {
                        logger.error('Error processing referral bonus:', error);
                    }
                }
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const usersCollection = db.collection('users');
            await usersCollection.updateOne(
                { chatId: clientChatId },
                {
                    $inc: {
                        purchases: 1,
                        totalSpent: order.finalPrice
                    },
                    $set: {
                        lastPurchase: new Date()
                    }
                },
                { upsert: true }
            );

        } else {
            // –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
            newStatus = 'rejected';
            adminMessage = `‚ùå *–ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω*\n\n–ó–∞–∫–∞–∑: \`${orderId}\`\n–ö–ª–∏–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω`;

            clientMessage =
                `‚ùå *–ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω*\n\n` +
                `üîó *–ó–∞–∫–∞–∑:* ${orderId}\n` +
                `üí∞ *–°—É–º–º–∞:* ${order.finalPrice} ${order.currency}\n\n` +
                `üìù *–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:*\n` +
                `‚Ä¢ –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞\n` +
                `‚Ä¢ –ù–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞\n` +
                `‚Ä¢ –ù–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç\n\n` +
                `üì± –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω—É –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è`;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await ordersCollection.updateOne(
            { orderId: orderId },
            {
                $set: {
                    status: newStatus,
                    adminDecision: isConfirm ? 'confirmed' : 'rejected',
                    adminDecisionAt: new Date(),
                    adminChatId: chatId
                }
            }
        );

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        await bot.sendMessage(clientChatId, clientMessage, { parse_mode: 'Markdown' });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
        await safeEditMessage(chatId, messageId, adminMessage, {
            parse_mode: 'Markdown',
            reply_markup: { inline_keyboard: [[{ text: 'üì± –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É', url: `tg://user?id=${clientChatId}` }]] }
        });

        if (logger && logger.userAction) {
            logger.userAction(chatId, isConfirm ? 'payment_confirmed' : 'payment_rejected', {
                orderId,
                clientId: clientChatId,
                amount: order.finalPrice
            });
        }

    } catch (error) {
        if (logger && logger.error) {
            logger.error('Error handling admin decision:', error);
        }
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ—à–µ–Ω–∏—è');
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
bot.onText(/\/start(.*)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const referralCode = match[1] ? match[1].trim() : null;

    if (logger && logger.userAction) {
        logger.userAction(chatId, 'bot_started', { referralCode });
    }

    if (referralCode && referralService) {
        try {
            const success = await referralService.activateReferral(chatId, referralCode);
            if (success) {
                await bot.sendMessage(chatId, 'üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥! –°–∫–∏–¥–∫–∞ 5% –Ω–∞ –ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É!');
            }
        } catch (error) {
            logger.error('Error activating referral:', error);
        }
    }

    await showMainMenu(chatId);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –æ—Ç –±–æ—Ç–æ–≤
    if (msg.from.is_bot) return;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (—Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –æ–ø–ª–∞—Ç—ã)
    if (msg.photo && global.awaitingScreenshots && global.awaitingScreenshots[chatId]) {
        await processPaymentScreenshot(msg);
        return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
    if (text && !text.startsWith('/')) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (global.userOrders && global.userOrders[chatId]) {
            await processOrderInput(chatId, text);
        }
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', async (q) => {
    const chatId = q.message.chat.id;
    const messageId = q.message.message_id;

    try {
        console.log('üîç Callback query received:', { chatId, data: q.data });
        await bot.answerCallbackQuery(q.id);

        // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é
        if (q.data === 'buy_diamonds') {
            await showRegionMenu(chatId, messageId);
        } else if (q.data === 'referral_menu') {
            await showReferralMenu(chatId, messageId);
        } else if (q.data === 'promo_menu') {
            await showPromoMenu(chatId, messageId);
        } else if (q.data === 'purchase_history') {
            await deleteMessage(chatId, messageId);
            await showPurchaseHistory(chatId);
        } else if (q.data === 'share_referral') {
            if (referralService) {
                const stats = await referralService.getReferralStats(chatId);
                if (stats?.referralCode) {
                    const shareText = `üéÅ –ü–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É 5% –Ω–∞ –∞–ª–º–∞–∑—ã MLBB!\n\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –ø–æ –º–æ–µ–π —Å—Å—ã–ª–∫–µ: t.me/your_bot?start=${stats.referralCode}`;
                    await bot.sendMessage(chatId, shareText);
                }
            }
        } else if (q.data === 'back_to_start') {
            await showMainMenu(chatId, messageId);
        } else if (q.data.startsWith('region_')) {
            const region = q.data.split('_')[1].toUpperCase();
            selectedRegion = region;
            await showDiamondsMenu(chatId, messageId);
        } else if (q.data === 'back_to_regions') {
            await showRegionMenu(chatId, messageId);
        } else if (q.data === 'back_to_diamonds') {
            await showDiamondsMenu(chatId, messageId);
        } else if (q.data === 'cancel_order') {
            // –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑
            if (global.userOrders && global.userOrders[chatId]) {
                delete global.userOrders[chatId];
            }
            await bot.sendMessage(chatId, '‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω');
            await showMainMenu(chatId);
        } else if (q.data.startsWith('pay_')) {
            await handlePaymentMethod(chatId, messageId, q.data);
        } else if (q.data.startsWith('paid_')) {
            await handlePaymentConfirmation(chatId, messageId, q.data);
        } else if (q.data.startsWith('confirm_') || q.data.startsWith('reject_')) {
            await handleAdminDecision(chatId, messageId, q.data);
        } else if (q.data.startsWith('diamond_')) {
            const diamondIndex = parseInt(q.data.split('_')[1]);
            await showOrderForm(chatId, messageId, diamondIndex);
        }

    } catch (error) {
        logger.error('Error handling callback query:', error);
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
});

// Express —Å–µ—Ä–≤–µ—Ä
app.get('/', (req, res) => {
    res.json({
        status: 'ANNUR DIAMONDS Bot v2.0 –∞–∫—Ç–∏–≤–µ–Ω',
        timestamp: new Date().toISOString(),
        version: '2.0.0',
        features: ['referrals', 'promo-codes', 'analytics']
    });
});

app.get('/health', (req, res) => {
    res.json({ status: 'OK', timestamp: new Date().toISOString() });
});

if (WEBHOOK_URL) {
    app.post(`/bot${TOKEN}`, (req, res) => {
        bot.processUpdate(req.body);
        res.sendStatus(200);
    });
}

// Graceful shutdown
process.on('SIGTERM', async () => {
    logger.info('üîÑ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
    try {
        if (client) await client.close();
        logger.info('‚úÖ Database connection closed');
    } catch (error) {
        logger.error('‚ùå Error closing database:', error);
    }
    process.exit(0);
});

process.on('SIGINT', async () => {
    logger.info('üîÑ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
    try {
        if (client) await client.close();
        logger.info('‚úÖ Database connection closed');
    } catch (error) {
        logger.error('‚ùå Error closing database:', error);
    }
    process.exit(0);
});

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function startBot() {
    try {
        const dbConnected = await connectToDatabase();
        if (!dbConnected) {
            logger.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
            process.exit(1);
        }

        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
        if (botHandlers) {
            bot.onText(/\/stats/, (msg) => botHandlers.handleStats(msg));
            bot.onText(/\/createpromo (.+)/, (msg, match) => botHandlers.handleCreatePromo(msg, match));
            bot.onText(/\/history/, (msg) => botHandlers.handleHistory(msg));
            bot.onText(/\/mybonus/, (msg) => botHandlers.handleMyBonus(msg));
        }

        if (WEBHOOK_URL) {
            await bot.setWebHook(`${WEBHOOK_URL}/bot${TOKEN}`);
            logger.info(`üîó Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${WEBHOOK_URL}/bot${TOKEN}`);
        }

        app.listen(PORT, () => {
            logger.info(`üöÄ Bot server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
            logger.info('‚úÖ ANNUR DIAMONDS Bot v2.0 –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
        });

    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
        process.exit(1);
    }
}

startBot();