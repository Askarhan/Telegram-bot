// ANNUR DIAMONDS Telegram Bot v2.0
// –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π, –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏ –∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é

const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const { MongoClient } = require('mongodb');
const axios = require('axios');

// –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
const { DIAMONDS_DATA_RU, DIAMONDS_DATA_KG, LOYALTY_LEVELS, EMOJIS, LIMITS } = require('./config/constants');
const logger = require('./utils/logger');
const Validators = require('./utils/validators');
const ReferralService = require('./services/referralService');
const PromoService = require('./services/promoService');
const BotHandlers = require('./handlers/botHandlers');

logger.info('üöÄ Starting ANNUR DIAMONDS Bot v2.0');
logger.info('üîç Checking environment variables...');

console.log('üîç Checking environment variables:');
console.log('TOKEN exists:', !!process.env.TOKEN);
console.log('MONGO_URI exists:', !!process.env.MONGO_URI);
console.log('CRYPTOCLOUD_API_KEY exists:', !!process.env.CRYPTOCLOUD_API_KEY);
console.log('WEBHOOK_URL:', process.env.WEBHOOK_URL || 'Not set (polling mode)');

const app = express();
app.use(express.json());

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const PORT = process.env.PORT || 3000;
const TOKEN = process.env.TOKEN;
const MONGO_URI = process.env.MONGO_URI;
const CRYPTOCLOUD_API_KEY = process.env.CRYPTOCLOUD_API_KEY;
const CRYPTOCLOUD_SHOP_ID = process.env.CRYPTOCLOUD_SHOP_ID;
const WEBHOOK_URL = process.env.WEBHOOK_URL;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if (!TOKEN || !MONGO_URI || !CRYPTOCLOUD_API_KEY) {
    logger.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
    logger.error('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã: TOKEN, MONGO_URI, CRYPTOCLOUD_API_KEY');
    process.exit(1);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
let bot;
if (WEBHOOK_URL) {
    bot = new TelegramBot(TOKEN);
    logger.info('üîó Bot initialized in webhook mode');
} else {
    bot = new TelegramBot(TOKEN, { polling: true });
    logger.info('üîÑ Bot initialized in polling mode');
}

const client = new MongoClient(MONGO_URI);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
const adminChatId = 895583535;
const waitingForAction = {};
let selectedRegion = 'RU';
let db, referralService, promoService, botHandlers;

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async function connectToDb() {
    try {
        await client.connect();
        db = client.db('bot_db');

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
        referralService = new ReferralService(db);
        promoService = new PromoService(db);
        botHandlers = new BotHandlers(bot, db, referralService, promoService, adminChatId);

        logger.success("‚úÖ Connected to MongoDB and services initialized");
        return true;
    } catch (e) {
        logger.error("‚ùå Failed to connect to MongoDB", e);
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook
async function setWebhook() {
    try {
        const webhookUrl = `${WEBHOOK_URL}/webhook_telegram`;
        await bot.setWebHook(webhookUrl);
        logger.success(`‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${webhookUrl}`);
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:', error);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
async function initialize() {
    const dbConnected = await connectToDb();
    if (!dbConnected) {
        logger.error('‚ùå Cannot start bot without database connection');
        process.exit(1);
    }

    if (WEBHOOK_URL) {
        await setWebhook();
    } else {
        logger.info('üì± Starting in polling mode - no webhook setup needed');
    }

    logger.success('üéâ Bot successfully initialized and ready!');
}

// Health check endpoints
app.get('/', (req, res) => {
    res.json({
        status: 'OK',
        message: 'ANNUR DIAMONDS Bot v2.0',
        version: '2.0.0',
        features: [
            'Referral System (3% from profit)',
            'Promo Codes with Admin Control',
            'Advanced Logging & Analytics',
            'Data Validation & Security',
            'Modular Architecture'
        ],
        uptime: process.uptime(),
        timestamp: new Date().toISOString()
    });
});

app.get('/health', (req, res) => {
    res.json({
        status: 'healthy',
        uptime: process.uptime(),
        version: '2.0.0',
        database: db ? 'connected' : 'disconnected'
    });
});

// Webhook –¥–ª—è CryptoCloud –ø–ª–∞—Ç–µ–∂–µ–π
app.post('/webhook', async (req, res) => {
    try {
        const data = req.body;
        logger.info('üí∞ CryptoCloud webhook received', { amount: data.amount, status: data.status });

        if (data.status === 'success') {
            const payload = JSON.parse(data.payload || '{}');
            const userId = payload.chatId;

            await processSuccessfulPayment(userId, data.amount, data.currency, payload);
        }

        res.sendStatus(200);
    } catch (e) {
        logger.error('‚ùå Webhook error:', e);
        res.sendStatus(500);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
async function processSuccessfulPayment(userId, amount, currency, payload) {
    try {
        const usersCollection = db.collection('users');
        const user = await usersCollection.findOne({ chatId: userId });
        let purchases = user ? user.purchases : 0;
        purchases++;

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        await usersCollection.updateOne(
            { chatId: userId },
            {
                $set: {
                    purchases: purchases,
                    lastPurchase: new Date(),
                    totalSpent: (user?.totalSpent || 0) + parseFloat(amount)
                }
            },
            { upsert: true }
        );

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å
        const referralResult = await referralService.processReferralBonus(userId, parseFloat(amount), currency);

        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞, –µ—Å–ª–∏ –±—ã–ª
        if (payload.promoCode) {
            await promoService.confirmPromoUsage(userId, payload.promoCode, payload.discount || 0, parseFloat(amount));
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        let successMessage = '‚úÖ *–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!* –ú—ã –ø–æ–ø–æ–ª–Ω–∏–º –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!';

        if (payload.promoCode) {
            successMessage += `\n\nüé´ –ü—Ä–æ–º–æ–∫–æ–¥ ${payload.promoCode} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!`;
        }

        await bot.sendMessage(userId, successMessage, { parse_mode: 'Markdown' });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ–Ω—É—Å –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫
        if (purchases % 5 === 0) {
            const bonusAmount = LOYALTY_LEVELS[Math.min(purchases, 50)]?.bonus || 50;
            await bot.sendMessage(userId, `üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!* üéâ –í—ã —Å–æ–≤–µ—Ä—à–∏–ª–∏ ${purchases} –ø–æ–∫—É–ø–æ–∫ –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ –±–æ–Ω—É—Å ‚Äî *${bonusAmount} –±–æ–Ω—É—Å–Ω—ã—Ö –∞–ª–º–∞–∑–æ–≤!*`, { parse_mode: 'Markdown' });
        }

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º –±–æ–Ω—É—Å–µ
        if (referralResult.success) {
            await bot.sendMessage(referralResult.referrerId,
                `üí∞ *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å!*\n\n–í–∞—à –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π –¥—Ä—É–≥ —Å–æ–≤–µ—Ä—à–∏–ª –ø–æ–∫—É–ø–∫—É!\n` +
                `–í—ã –ø–æ–ª—É—á–∏–ª–∏: *${referralResult.bonus} –±–æ–Ω—É—Å–Ω—ã—Ö –∞–ª–º–∞–∑–æ–≤* üíé`,
                { parse_mode: 'Markdown' }
            );
        }

        // –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        let adminMessage = `‚úÖ *–ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ CryptoCloud!*\n` +
            `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${payload.username}\n` +
            `–°—É–º–º–∞: ${amount} ${currency}\n` +
            `–ü–æ–∫—É–ø–æ–∫: ${purchases}`;

        if (payload.promoCode) {
            adminMessage += `\nüé´ –ü—Ä–æ–º–æ–∫–æ–¥: ${payload.promoCode}`;
        }

        if (referralResult.success) {
            adminMessage += `\nüí∞ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å: ${referralResult.bonus}`;
        }

        await bot.sendMessage(adminChatId, adminMessage, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚úÖ –ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω', callback_data: `complete_order_${userId}` }]
                ]
            }
        });

        // –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
        logger.financial('order', parseFloat(amount), currency, userId, payload);

    } catch (error) {
        logger.error('‚ùå Error processing successful payment', error);
    }
}

// Webhook –¥–ª—è Telegram
app.post('/webhook_telegram', (req, res) => {
    try {
        logger.info('üì® Telegram update received');
        bot.processUpdate(req.body);
        res.sendStatus(200);
    } catch (e) {
        logger.error('‚ùå processUpdate error:', e);
        res.sendStatus(500);
    }
});

// Endpoint –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook
app.get('/set-webhook', async (req, res) => {
    try {
        await setWebhook();
        res.json({ success: true, message: 'Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' });
    } catch (error) {
        res.status(500).json({ success: false, error: error.message });
    }
});

// –§—É–Ω–∫—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
async function showMainMenu(chatId, messageId = null) {
    try {
        const menuText =
            'üíé *ANNUR DIAMONDS v2.0* üíé\n\n' +
            '‚Ä¢ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–ª–º–∞–∑–æ–≤ –¥–ª—è Mobile Legends: Bang Bang\n\n' +
            '‚Ä¢ *–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:*\n' +
            '‚Ä¢ *–†–æ—Å—Å–∏—è:* –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞\n' +
            '‚Ä¢ *–ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω:* O! –î–µ–Ω—å–≥–∏, Balance.kg\n\n' +
            '‚ö° –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞ 5-15 –º–∏–Ω—É—Ç!\n\n' +
            'üéÅ *–ù–æ–≤–∏–Ω–∫–∏:*\n' +
            '‚Ä¢ üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ - –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ —Å –¥—Ä—É–∑–µ–π!\n' +
            '‚Ä¢ üé´ –ü—Ä–æ–º–æ–∫–æ–¥—ã –∏ —Å–∫–∏–¥–∫–∏\n' +
            '‚Ä¢ üìä –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏';

        const keyboard = [
            [
                { text: 'üíé –ö—É–ø–∏—Ç—å –∞–ª–º–∞–∑—ã', callback_data: 'buy_diamonds' },
                { text: 'üìä –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫', callback_data: 'purchase_history' }
            ],
            [
                { text: 'üë• –†–µ—Ñ–µ—Ä–∞–ª—ã', callback_data: 'referral_menu' },
                { text: 'üé´ –ü—Ä–æ–º–æ–∫–æ–¥', callback_data: 'promo_menu' }
            ],
            [
                { text: 'üíñ –û—Ç–∑—ã–≤—ã', callback_data: 'reviews' },
                { text: 'üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data: 'support' }
            ]
        ];

        const options = {
            parse_mode: 'Markdown',
            reply_markup: { inline_keyboard: keyboard }
        };

        if (messageId) {
            await safeEditMessage(chatId, messageId, menuText, options);
        } else {
            await bot.sendMessage(chatId, menuText, options);
        }

        logger.userAction(chatId, 'main_menu_viewed');

    } catch (error) {
        logger.error('‚ùå Error showing main menu', error);
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start');
    }
}

// –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
async function safeEditMessage(chatId, messageId, text, options) {
    try {
        await bot.editMessageText(text, {
            chat_id: chatId,
            message_id: messageId,
            ...options
        });
    } catch (error) {
        // Fallback: —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try {
            await bot.deleteMessage(chatId, messageId);
        } catch (delError) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        }
        await bot.sendMessage(chatId, text, options);
    }
}

// –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
bot.onText(/\/start(?:\s+(.+))?/, async (msg, match) => {
    const chatId = msg.chat.id;
    const referralCode = match ? match[1] : null;

    logger.userAction(chatId, 'bot_started', { referralCode });

    try {
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ–≥–æ
        if (referralCode && referralService) {
            const result = await referralService.activateReferral(referralCode, chatId);
            if (result.success) {
                await bot.sendMessage(chatId,
                    `üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!*\n\n` +
                    `–í—ã –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${result.referrerName}!\n` +
                    `–ü–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É 5% –Ω–∞ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑! üíé`,
                    { parse_mode: 'Markdown' }
                );
            }
        }

        await showMainMenu(chatId);
    } catch (error) {
        logger.error('‚ùå Error in start command', error);
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
});

// –ö–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–µ—Å–ª–∏ —Å–µ—Ä–≤–∏—Å—ã –≥–æ—Ç–æ–≤—ã)
bot.onText(/\/history/, (msg) => {
    if (botHandlers) {
        botHandlers.handleHistory(msg);
    } else {
        bot.sendMessage(msg.chat.id, '‚è≥ –°–µ—Ä–≤–∏—Å—ã –±–æ—Ç–∞ –µ—â–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.');
    }
});

bot.onText(/\/mybonus/, (msg) => {
    if (botHandlers) {
        botHandlers.handleMyBonus(msg);
    } else {
        bot.sendMessage(msg.chat.id, '‚è≥ –°–µ—Ä–≤–∏—Å—ã –±–æ—Ç–∞ –µ—â–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.');
    }
});

bot.onText(/\/stats/, (msg) => {
    if (botHandlers) {
        botHandlers.handleStats(msg);
    } else {
        bot.sendMessage(msg.chat.id, '‚è≥ –°–µ—Ä–≤–∏—Å—ã –±–æ—Ç–∞ –µ—â–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.');
    }
});

bot.onText(/\/createpromo/, (msg) => {
    if (botHandlers) {
        botHandlers.handleCreatePromo(msg);
    } else {
        bot.sendMessage(msg.chat.id, '‚è≥ –°–µ—Ä–≤–∏—Å—ã –±–æ—Ç–∞ –µ—â–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', (msg) => {
    if (botHandlers) {
        botHandlers.handleMessage(msg);
    }
});

// –ë–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback_query (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
bot.on('callback_query', async (q) => {
    const chatId = q.message.chat.id;
    const messageId = q.message.message_id;

    try {
        await bot.answerCallbackQuery(q.id);

        // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é
        if (q.data === 'buy_diamonds') {
            await showRegionMenu(chatId, messageId);
        } else if (q.data === 'back_to_start') {
            await showMainMenu(chatId, messageId);
        } else if (q.data === 'support') {
            await bot.sendMessage(chatId, 'üìû *–ü–æ–¥–¥–µ—Ä–∂–∫–∞*\n\n–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @annur_admin', { parse_mode: 'Markdown' });
        } else if (q.data === 'reviews') {
            await bot.sendMessage(chatId, 'üíñ –û—Ç–∑—ã–≤—ã –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: https://t.me/annurreviews');
        }
        // –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±—É–¥—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

    } catch (e) {
        logger.error('‚ùå Callback error:', e);
        try {
            await bot.answerCallbackQuery(q.id, { text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.' });
        } catch (answerError) {
            logger.error('‚ùå Error answering callback:', answerError);
        }
    }
});

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
async function showRegionMenu(chatId, messageId = null) {
    const regionText =
        'üåç *–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏–æ–Ω*\n\n' +
        'üá∑üá∫ *–†–æ—Å—Å–∏—è* - –ø–µ—Ä–µ–≤–æ–¥—ã, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞\n' +
        'üá∞üá¨ *–ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω* - O! –î–µ–Ω—å–≥–∏, Balance.kg\n\n' +
        'üí° –û—Ç —Ä–µ–≥–∏–æ–Ω–∞ –∑–∞–≤–∏—Å—è—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã –∏ —Ü–µ–Ω—ã';

    const keyboard = [
        [
            { text: 'üá∑üá∫ –†–æ—Å—Å–∏—è', callback_data: 'region_ru' },
            { text: 'üá∞üá¨ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω', callback_data: 'region_kg' }
        ],
        [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_start' }]
    ];

    const options = {
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: keyboard }
    };

    try {
        if (messageId) {
            await safeEditMessage(chatId, messageId, regionText, options);
        } else {
            await bot.sendMessage(chatId, regionText, options);
        }
    } catch (error) {
        logger.error('‚ùå Error showing region menu', error);
    }
}

// Graceful shutdown
process.on('SIGTERM', async () => {
    logger.info('üîÑ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
    try {
        await client.close();
        logger.info('‚úÖ Database connection closed');
    } catch (error) {
        logger.error('‚ùå Error closing database:', error);
    }
    process.exit(0);
});

process.on('SIGINT', async () => {
    logger.info('üîÑ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
    try {
        await client.close();
        logger.info('‚úÖ Database connection closed');
    } catch (error) {
        logger.error('‚ùå Error closing database:', error);
    }
    process.exit(0);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (reason, promise) => {
    logger.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
});

process.on('uncaughtException', (error) => {
    logger.error('‚ùå Uncaught Exception:', error);
    process.exit(1);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const server = app.listen(PORT, '0.0.0.0', async () => {
    logger.success(`üöÄ Server running on port ${PORT}`);
    logger.info(`üìç Webhook URL: ${WEBHOOK_URL || 'Not using webhooks (polling mode)'}`);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    await initialize();
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
module.exports = { app, bot, db, server };