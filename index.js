// ANNUR DIAMONDS Telegram Bot v2.0
// –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏

const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const { MongoClient } = require('mongodb');

// –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
const { DIAMONDS_DATA_RU, DIAMONDS_DATA_KG, LOYALTY_LEVELS } = require('./config/constants');
const logger = require('./utils/logger');
const Validators = require('./utils/validators');
const ReferralService = require('./services/referralService');
const PromoService = require('./services/promoService');
const BotHandlers = require('./handlers/botHandlers');

logger.info('üöÄ Starting ANNUR DIAMONDS Bot v2.0');

console.log('üîç Checking environment variables:');
console.log('TOKEN exists:', !!process.env.TOKEN);
console.log('MONGO_URI exists:', !!process.env.MONGO_URI);
console.log('CRYPTOCLOUD_API_KEY exists:', !!process.env.CRYPTOCLOUD_API_KEY);
console.log('WEBHOOK_URL:', process.env.WEBHOOK_URL || 'Not set (polling mode)');

const app = express();
app.use(express.json());

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const PORT = process.env.PORT || 3000;
const TOKEN = process.env.TOKEN;
const MONGO_URI = process.env.MONGO_URI;
const CRYPTOCLOUD_API_KEY = process.env.CRYPTOCLOUD_API_KEY;
const CRYPTOCLOUD_SHOP_ID = process.env.CRYPTOCLOUD_SHOP_ID;
const WEBHOOK_URL = process.env.WEBHOOK_URL;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if (!TOKEN || !MONGO_URI || !CRYPTOCLOUD_API_KEY) {
    logger.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
    logger.error('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã: TOKEN, MONGO_URI, CRYPTOCLOUD_API_KEY');

    // –í —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –≤—ã—Ö–æ–¥–∞
    if (process.argv.includes('--test-mode')) {
        logger.warn('‚ö†Ô∏è –ó–∞–ø—É—Å–∫ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –±–µ–∑ –ø–æ–ª–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
    } else {
        process.exit(1);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
let bot;
if (TOKEN) {
    if (WEBHOOK_URL) {
        bot = new TelegramBot(TOKEN);
        logger.info('üîó Bot initialized in webhook mode');
    } else {
        bot = new TelegramBot(TOKEN, { polling: true });
        logger.info('üìä Bot initialized in polling mode');
    }
} else if (process.argv.includes('--test-mode')) {
    logger.warn('‚ö†Ô∏è Bot –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω - –Ω–µ—Ç TOKEN');
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let db = null;
let client = null;
let referralService = null;
let promoService = null;
let botHandlers = null;
let selectedRegion = 'RU';

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
async function connectToDatabase() {
    try {
        client = new MongoClient(MONGO_URI, {
            useUnifiedTopology: true,
            serverSelectionTimeoutMS: 5000,
        });
        await client.connect();
        db = client.db('telegram_bot');

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
        referralService = new ReferralService(db);
        promoService = new PromoService(db);
        botHandlers = new BotHandlers(bot, db, referralService, promoService);

        logger.info('‚úÖ Database connected successfully');
        return true;
    } catch (error) {
        logger.error('‚ùå Database connection failed:', error);
        return false;
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function escapeMarkdown(text) {
    // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
    return text.replace(/[_*[\]()~`>#+=|{}.!-]/g, '\\$&');
}

async function safeEditMessage(chatId, messageId, text, options = {}) {
    try {
        await bot.editMessageText(text, {
            chat_id: chatId,
            message_id: messageId,
            ...options
        });
    } catch (error) {
        if (error.code !== 'ETELEGRAM' || !error.response || error.response.body.error_code !== 400) {
            logger.error('Error editing message:', error);
        }
    }
}

async function deleteMessage(chatId, messageId) {
    try {
        await bot.deleteMessage(chatId, messageId);
    } catch (error) {
        logger.error('Error deleting message:', error);
    }
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async function showMainMenu(chatId, messageId = null) {
    const welcomeText =
        'üíé *ANNUR DIAMONDS*\n\n' +
        'üéÆ *Mobile Legends: Bang Bang*\n' +
        '‚ö° –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–ª–º–∞–∑–æ–≤\n' +
        'üîí –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏\n' +
        'üéÅ –ë–æ–Ω—É—Å—ã –∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã\n\n' +
        'üë• *–†–µ—Ñ–µ—Ä–∞–ª—ã* - –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π\n' +
        'üìä *–ò—Å—Ç–æ—Ä–∏—è* - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø–æ–∫—É–ø–∫–∏';

    const keyboard = [
        [{ text: 'üíé –ö—É–ø–∏—Ç—å –∞–ª–º–∞–∑—ã', callback_data: 'buy_diamonds' }],
        [
            { text: 'üë• –†–µ—Ñ–µ—Ä–∞–ª—ã', callback_data: 'referral_menu' },
            { text: 'üé´ –ü—Ä–æ–º–æ–∫–æ–¥', callback_data: 'promo_menu' }
        ],
        [{ text: 'üìä –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫', callback_data: 'purchase_history' }],
        [
            { text: 'üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data: 'support' },
            { text: 'üíñ –û—Ç–∑—ã–≤—ã', url: 'https://t.me/annurreviews' }
        ]
    ];

    const options = {
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: keyboard }
    };

    try {
        if (messageId) {
            await safeEditMessage(chatId, messageId, welcomeText, options);
        } else {
            await bot.sendMessage(chatId, welcomeText, options);
        }
    } catch (error) {
        logger.error('Error showing main menu:', error);
    }
}

// –ú–µ–Ω—é —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
async function showReferralMenu(chatId, messageId = null) {
    try {
        if (!referralService) {
            await bot.sendMessage(chatId, '‚ùå –°–µ—Ä–≤–∏—Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            return;
        }

        let stats = await referralService.getReferralStats(chatId);
        if (!stats) {
            await referralService.createReferralCode(chatId);
            stats = await referralService.getReferralStats(chatId);
        }

        const referralText =
            `üë• *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞*\n\n` +
            `üîó *–í–∞—à –∫–æ–¥:* \`${stats.referralCode}\`\n` +
            `üí∞ *–í–∞—à –±–æ–Ω—É—Å:* ${stats.currentBonus} –∞–ª–º–∞–∑–æ–≤\n` +
            `üë®‚Äçüë©‚Äçüëß‚Äçüë¶ *–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ:* ${stats.referralsCount} –¥—Ä—É–∑–µ–π\n` +
            `üìà *–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:* ${stats.totalEarned} –∞–ª–º–∞–∑–æ–≤\n\n` +
            `üéÅ *–£—Å–ª–æ–≤–∏—è:*\n` +
            `‚Ä¢ –î—Ä—É–≥ –ø–æ–ª—É—á–∞–µ—Ç —Å–∫–∏–¥–∫—É 5\\%\n` +
            `‚Ä¢ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 3\\% —Å –ø–æ–∫—É–ø–∫–∏\n` +
            `‚Ä¢ –ë–æ–Ω—É—Å—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ`;

        const keyboard = [
            [{ text: 'üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π', callback_data: 'share_referral' }],
            [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_start' }]
        ];

        const options = {
            parse_mode: 'Markdown',
            reply_markup: { inline_keyboard: keyboard }
        };

        if (messageId) {
            await safeEditMessage(chatId, messageId, referralText, options);
        } else {
            await bot.sendMessage(chatId, referralText, options);
        }

        if (logger && logger.userAction) {
            logger.userAction(chatId, 'referral_menu_viewed');
        }

    } catch (error) {
        logger.error('Error showing referral menu:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã');
    }
}

// –ú–µ–Ω—é –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
async function showPromoMenu(chatId, messageId = null) {
    try {
        if (!promoService) {
            await bot.sendMessage(chatId, '‚ùå –°–µ—Ä–≤–∏—Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            return;
        }

        // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const usersCollection = db.collection('users');
        const user = await usersCollection.findOne({ chatId: chatId });

        let promoText = `üé´ *–ü—Ä–æ–º–æ–∫–æ–¥—ã*\n\n`;

        if (!user || user.purchases === 0) {
            const welcomePromo = await promoService.createWelcomePromo(chatId);
            if (welcomePromo) {
                promoText += `üéÅ *–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤:*\n`;
                promoText += `\`${welcomePromo.code}\` - —Å–∫–∏–¥–∫–∞ ${welcomePromo.discount}%\n\n`;
            }
        }

        promoText += `üí° *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*\n`;
        promoText += `‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞\n`;
        promoText += `‚Ä¢ –°–∫–∏–¥–∫–∞ –ø—Ä–∏–º–µ–Ω–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n`;
        promoText += `‚Ä¢ –ü—Ä–æ–º–æ–∫–æ–¥—ã –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ\n\n`;
        promoText += `üîç *–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤—ã–º–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏ –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ!*`;

        const keyboard = [
            [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_start' }]
        ];

        const options = {
            parse_mode: 'Markdown',
            reply_markup: { inline_keyboard: keyboard }
        };

        if (messageId) {
            await safeEditMessage(chatId, messageId, promoText, options);
        } else {
            await bot.sendMessage(chatId, promoText, options);
        }

        if (logger && logger.userAction) {
            logger.userAction(chatId, 'promo_menu_viewed');
        }

    } catch (error) {
        logger.error('Error showing promo menu:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤');
    }
}

// –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫
async function showPurchaseHistory(chatId) {
    try {
        if (!db) {
            await bot.sendMessage(chatId, '‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
            return;
        }

        const usersCollection = db.collection('users');
        const user = await usersCollection.findOne({ chatId: chatId });
        const purchases = (user && user.purchases) ? user.purchases : 0;
        const totalSpent = (user && user.totalSpent) ? user.totalSpent : 0;
        const lastPurchase = (user && user.lastPurchase) ? user.lastPurchase : null;

        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        let referralStats = null;
        if (referralService) {
            try {
                referralStats = await referralService.getReferralStats(chatId);
            } catch (error) {
                logger.error('Error getting referral stats', error);
            }
        }

        let historyText = `üìä *–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫*\n\n`;
        historyText += `üë§ *–ü–æ–∫—É–ø–∫–∏:* ${purchases}\n`;
        historyText += `üí∞ *–ü–æ—Ç—Ä–∞—á–µ–Ω–æ:* ${totalSpent.toFixed(2)}\n`;

        if (referralStats && referralStats.currentBonus !== undefined) {
            historyText += `üíé *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã:* ${referralStats.currentBonus}\n`;
        }

        if (purchases === 0) {
            historyText += `üíé *–°—Ç–∞—Ç—É—Å:* –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç\n\n`;
            historyText += `üåü –°–æ–≤–µ—Ä—à–∏—Ç–µ –ø–æ–∫—É–ø–∫—É –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å—ã\\!\n`;
        } else {
            const untilBonus = 5 - (purchases % 5);
            const bonusesReceived = Math.floor(purchases / 5);

            historyText += `üéÅ *–ë–æ–Ω—É—Å–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ:* ${bonusesReceived}\n`;
            if (untilBonus === 5) {
                historyText += `‚ú® *–ì–æ—Ç–æ–≤ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é –±–æ–Ω—É—Å–∞\\!*\n`;
            } else {
                historyText += `‚è≥ *–î–æ –±–æ–Ω—É—Å–∞:* ${untilBonus} –ø–æ–∫—É–ø–æ–∫\n`;
            }

            if (lastPurchase && lastPurchase instanceof Date) {
                historyText += `üìÖ *–ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–∫—É–ø–∫–∞:* ${lastPurchase.toLocaleDateString('ru-RU')}\n`;
            } else if (lastPurchase && typeof lastPurchase === 'string') {
                historyText += `üìÖ *–ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–∫—É–ø–∫–∞:* ${new Date(lastPurchase).toLocaleDateString('ru-RU')}\n`;
            }
        }

        // –£—Ä–æ–≤–µ–Ω—å –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
        let loyaltyLevel = '';
        if (purchases >= 50) loyaltyLevel = 'üëë –õ–µ–≥–µ–Ω–¥–∞';
        else if (purchases >= 20) loyaltyLevel = 'üíé VIP –∫–ª–∏–µ–Ω—Ç';
        else if (purchases >= 10) loyaltyLevel = '‚≠ê –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç';
        else if (purchases >= 5) loyaltyLevel = 'üî• –ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å';
        else if (purchases >= 1) loyaltyLevel = 'üå± –ù–æ–≤–∏—á–æ–∫';
        else loyaltyLevel = 'üëã –ì–æ—Å—Ç—å';

        historyText += `\n${loyaltyLevel}`;

        const keyboard = [
            [{ text: 'üíé –ö—É–ø–∏—Ç—å –∞–ª–º–∞–∑—ã', callback_data: 'buy_diamonds' }],
            [{ text: 'üë• –†–µ—Ñ–µ—Ä–∞–ª—ã', callback_data: 'referral_menu' }],
            [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_start' }]
        ];

        await bot.sendMessage(chatId, historyText, {
            parse_mode: 'Markdown',
            reply_markup: { inline_keyboard: keyboard }
        });

        if (logger && logger.userAction) {
            logger.userAction(chatId, 'purchase_history_viewed');
        }

    } catch (error) {
        if (logger && logger.error) {
            logger.error('Error showing purchase history:', error);
        } else {
            console.error('Error showing purchase history:', error);
        }

        if (bot && bot.sendMessage) {
            await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫');
        }
    }
}

// –ú–µ–Ω—é —Ä–µ–≥–∏–æ–Ω–æ–≤
async function showRegionMenu(chatId, messageId = null) {
    const regionText =
        'üåç *–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏–æ–Ω*\n\n' +
        'üá∑üá∫ *–†–æ—Å—Å–∏—è* - –∫–∞—Ä—Ç—ã, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞\n' +
        'üá∞üá¨ *–ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω* - O! –î–µ–Ω—å–≥–∏, Balance.kg\n\n' +
        'üí° –û—Ç —Ä–µ–≥–∏–æ–Ω–∞ –∑–∞–≤–∏—Å—è—Ç —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã –∏ —Ü–µ–Ω—ã';

    const keyboard = [
        [
            { text: 'üá∑üá∫ –†–æ—Å—Å–∏—è', callback_data: 'region_ru' },
            { text: 'üá∞üá¨ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω', callback_data: 'region_kg' }
        ],
        [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_start' }]
    ];

    const options = {
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: keyboard }
    };

    try {
        if (messageId) {
            await safeEditMessage(chatId, messageId, regionText, options);
        } else {
            await bot.sendMessage(chatId, regionText, options);
        }
    } catch (error) {
        logger.error('Error showing region menu:', error);
    }
}

// –ú–µ–Ω—é –∞–ª–º–∞–∑–æ–≤
async function showDiamondsMenu(chatId, messageId = null) {
    try {
        const currency = selectedRegion === 'RU' ? '‚ÇΩ' : 'KGS';
        const diamondsData = selectedRegion === 'RU' ? DIAMONDS_DATA_RU : DIAMONDS_DATA_KG;
        const keyboard = [];
        let currentRow = [];

        diamondsData.forEach((d, index) => {
            const amountText = typeof d.amount === 'number' ? `${d.amount}üíé` : d.amount;

            currentRow.push({
                text: `${amountText} ‚Äî ${d.price.toLocaleString('ru-RU')} ${currency}`,
                callback_data: `diamond_${index}`
            });

            if (currentRow.length === 2 || index === diamondsData.length - 1) {
                keyboard.push(currentRow);
                currentRow = [];
            }
        });

        keyboard.push([{ text: 'üîô –ö –≤—ã–±–æ—Ä—É —Ä–µ–≥–∏–æ–Ω–∞', callback_data: 'back_to_regions' }]);

        const menuText =
            `üíé *–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –∞–ª–º–∞–∑–æ–≤*\n\n` +
            `üìç *–†–µ–≥–∏–æ–Ω:* ${selectedRegion === 'RU' ? 'üá∑üá∫ –†–æ—Å—Å–∏—è' : 'üá∞üá¨ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω'}\n` +
            `üí∞ *–í–∞–ª—é—Ç–∞:* ${currency}\n\n` +
            `üí° *–ü–æ–¥—Å–∫–∞–∑–∫–∞:* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –¥–ª—è —Å–∫–∏–¥–∫–∏!`;

        const options = {
            parse_mode: 'Markdown',
            reply_markup: { inline_keyboard: keyboard }
        };

        if (messageId) {
            await safeEditMessage(chatId, messageId, menuText, options);
        } else {
            await bot.sendMessage(chatId, menuText, options);
        }

        if (logger && logger.userAction) {
            logger.userAction(chatId, 'diamonds_menu_viewed', { region: selectedRegion });
        }

    } catch (error) {
        logger.error('Error showing diamonds menu', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ –∞–ª–º–∞–∑–æ–≤');
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
bot.onText(/\/start(.*)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const referralCode = match[1] ? match[1].trim() : null;

    if (logger && logger.userAction) {
        logger.userAction(chatId, 'bot_started', { referralCode });
    }

    if (referralCode && referralService) {
        try {
            const success = await referralService.activateReferral(chatId, referralCode);
            if (success) {
                await bot.sendMessage(chatId, 'üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥! –°–∫–∏–¥–∫–∞ 5% –Ω–∞ –ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É!');
            }
        } catch (error) {
            logger.error('Error activating referral:', error);
        }
    }

    await showMainMenu(chatId);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', async (q) => {
    const chatId = q.message.chat.id;
    const messageId = q.message.message_id;

    try {
        await bot.answerCallbackQuery(q.id);

        // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é
        if (q.data === 'buy_diamonds') {
            await showRegionMenu(chatId, messageId);
        } else if (q.data === 'referral_menu') {
            await showReferralMenu(chatId, messageId);
        } else if (q.data === 'promo_menu') {
            await showPromoMenu(chatId, messageId);
        } else if (q.data === 'purchase_history') {
            await deleteMessage(chatId, messageId);
            await showPurchaseHistory(chatId);
        } else if (q.data === 'share_referral') {
            if (referralService) {
                const stats = await referralService.getReferralStats(chatId);
                if (stats?.referralCode) {
                    const shareText = `üéÅ –ü–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É 5% –Ω–∞ –∞–ª–º–∞–∑—ã MLBB!\n\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –ø–æ –º–æ–µ–π —Å—Å—ã–ª–∫–µ: t.me/your_bot?start=${stats.referralCode}`;
                    await bot.sendMessage(chatId, shareText);
                }
            }
        } else if (q.data === 'back_to_start') {
            await showMainMenu(chatId, messageId);
        } else if (q.data === 'support') {
            await bot.sendMessage(chatId, 'üìû *–ü–æ–¥–¥–µ—Ä–∂–∫–∞*\n\n–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @annur\\_admin', { parse_mode: 'Markdown' });
        } else if (q.data.startsWith('region_')) {
            const region = q.data.split('_')[1].toUpperCase();
            selectedRegion = region;
            await showDiamondsMenu(chatId, messageId);
        } else if (q.data === 'back_to_regions') {
            await showRegionMenu(chatId, messageId);
        } else if (q.data.startsWith('diamond_')) {
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–ª–º–∞–∑–æ–≤
            await bot.sendMessage(chatId, '–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏');
        }

    } catch (error) {
        logger.error('Error handling callback query:', error);
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
});

// Express —Å–µ—Ä–≤–µ—Ä
app.get('/', (req, res) => {
    res.json({
        status: 'ANNUR DIAMONDS Bot v2.0 –∞–∫—Ç–∏–≤–µ–Ω',
        timestamp: new Date().toISOString(),
        version: '2.0.0',
        features: ['referrals', 'promo-codes', 'analytics']
    });
});

app.get('/health', (req, res) => {
    res.json({ status: 'OK', timestamp: new Date().toISOString() });
});

if (WEBHOOK_URL) {
    app.post(`/bot${TOKEN}`, (req, res) => {
        bot.processUpdate(req.body);
        res.sendStatus(200);
    });
}

// Graceful shutdown
process.on('SIGTERM', async () => {
    logger.info('üîÑ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
    try {
        if (client) await client.close();
        logger.info('‚úÖ Database connection closed');
    } catch (error) {
        logger.error('‚ùå Error closing database:', error);
    }
    process.exit(0);
});

process.on('SIGINT', async () => {
    logger.info('üîÑ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
    try {
        if (client) await client.close();
        logger.info('‚úÖ Database connection closed');
    } catch (error) {
        logger.error('‚ùå Error closing database:', error);
    }
    process.exit(0);
});

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function startBot() {
    try {
        const dbConnected = await connectToDatabase();
        if (!dbConnected) {
            logger.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
            process.exit(1);
        }

        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
        if (botHandlers) {
            bot.onText(/\/stats/, (msg) => botHandlers.handleStats(msg));
            bot.onText(/\/createpromo (.+)/, (msg, match) => botHandlers.handleCreatePromo(msg, match));
            bot.onText(/\/history/, (msg) => botHandlers.handleHistory(msg));
            bot.onText(/\/mybonus/, (msg) => botHandlers.handleMyBonus(msg));
        }

        if (WEBHOOK_URL) {
            await bot.setWebHook(`${WEBHOOK_URL}/bot${TOKEN}`);
            logger.info(`üîó Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${WEBHOOK_URL}/bot${TOKEN}`);
        }

        app.listen(PORT, () => {
            logger.info(`üöÄ Bot server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
            logger.info('‚úÖ ANNUR DIAMONDS Bot v2.0 –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
        });

    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
        process.exit(1);
    }
}

startBot();