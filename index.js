// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const { MongoClient } = require('mongodb');

// –°–æ–∑–¥–∞–µ–º Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
const app = express();

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new TelegramBot(process.env.TOKEN, { polling: true });

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
let db;

console.log('üîç Checking environment variables:');
console.log('TOKEN exists:', !!process.env.TOKEN);
console.log('MONGO_URI exists:', !!process.env.MONGO_URI);
console.log('CRYPTOCLOUD_API_KEY exists:', !!process.env.CRYPTOCLOUD_API_KEY);
console.log('WEBHOOK_URL:', process.env.WEBHOOK_URL);

// –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å app
app.use(express.json({ limit: '10mb' }));
app.use((req, res, next) => {
    res.setHeader('X-Frame-Options', 'DENY');
    res.setHeader('X-Content-Type-Options', 'nosniff');
    res.removeHeader('X-Powered-By');
    next();
});

// –û—Å—Ç–∞–ª—å–Ω–æ–π –≤–∞—à 

// –°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ —Å —Ä–∞–∑—É–º–Ω—ã–º–∏ –±–æ–Ω—É—Å–∞–º–∏
function getLoyaltyInfo(purchases) {
    let level, emoji, benefits, nextLevel, discount, bonusFrequency;
    
    if (purchases >= 50) {
        level = '–õ–µ–≥–µ–Ω–¥–∞';
        emoji = 'üëë';
        discount = 0; // –õ–µ–≥–µ–Ω–¥—ã –ø–æ–ª—É—á–∞—é—Ç –¥—Ä—É–≥–∏–µ –±–æ–Ω—É—Å—ã –≤–º–µ—Å—Ç–æ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π —Å–∫–∏–¥–∫–∏
        bonusFrequency = 4; // –±–æ–Ω—É—Å –∫–∞–∂–¥—ã–µ 4 –ø–æ–∫—É–ø–∫–∏ (–∫–∞–∫ —É –æ–±—ã—á–Ω—ã—Ö)
        benefits = [
            'üéÅ –ë–æ–Ω—É—Å –∫–∞–∂–¥—ã–µ 4 –ø–æ–∫—É–ø–∫–∏',
            'üéüÔ∏è 3 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∫–∏–¥–∫–∏ 10%',
            '‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤',
            'üéâ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã',
            'üëë –°—Ç–∞—Ç—É—Å "–õ–µ–≥–µ–Ω–¥–∞"',
            'üìû –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞'
        ];
        nextLevel = null;
    } else if (purchases >= 20) {
        level = 'VIP –∫–ª–∏–µ–Ω—Ç';
        emoji = 'üíé';
        discount = 0; // VIP –ø–æ–ª—É—á–∞—é—Ç –ª–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∫–∏–¥–∫–∏
        bonusFrequency = 4;
        benefits = [
            'üéÅ –ë–æ–Ω—É—Å –∫–∞–∂–¥—ã–µ 4 –ø–æ–∫—É–ø–∫–∏',
            'üéüÔ∏è 3 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∫–∏–¥–∫–∏ 7%',
            '‚ö° –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤',
            'üéØ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è'
        ];
        nextLevel = { name: '–õ–µ–≥–µ–Ω–¥–∞', need: 50 - purchases };
    } else if (purchases >= 10) {
        level = '–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç';
        emoji = '‚≠ê';
        discount = 0; // –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã - –ª–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∫–∏–¥–∫–∏
        bonusFrequency = 5;
        benefits = [
            'üéÅ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–æ–Ω—É—Å—ã (–∫–∞–∂–¥—ã–µ 5 –ø–æ–∫—É–ø–æ–∫)',
            'üéüÔ∏è 2 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∫–∏–¥–∫–∏ 5%',
            'üì± –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞'
        ];
        nextLevel = { name: 'VIP –∫–ª–∏–µ–Ω—Ç', need: 20 - purchases };
    } else if (purchases >= 5) {
        level = '–ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å';
        emoji = 'üî•';
        discount = 0;
        bonusFrequency = 5;
        benefits = [
            'üéÅ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–æ–Ω—É—Å—ã (–∫–∞–∂–¥—ã–µ 5 –ø–æ–∫—É–ø–æ–∫)',
            'üéüÔ∏è 1 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∫–∏–¥–∫–∏ 3%',
            'üåü –î–æ—Å—Ç—É–ø –∫ –∞–∫—Ü–∏—è–º'
        ];
        nextLevel = { name: '–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç', need: 10 - purchases };
    } else if (purchases >= 1) {
        level = '–ù–æ–≤–∏—á–æ–∫';
        emoji = 'üå±';
        discount = 0;
        bonusFrequency = 5;
        benefits = [
            'üéÅ –ë–æ–Ω—É—Å –ø–æ—Å–ª–µ 5 –ø–æ–∫—É–ø–æ–∫',
            'üìö –û–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
            'üí¨ –ë–∞–∑–æ–≤–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞'
        ];
        nextLevel = { name: '–ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å', need: 5 - purchases };
    } else {
        level = '–ì–æ—Å—Ç—å';
        emoji = 'üëã';
        discount = 0;
        bonusFrequency = 5;
        benefits = [
            'üéØ –ü–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞ = —Å—Ç–∞—Ä—Ç –ø—É—Ç–∏',
            'üìñ –û–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–∏—Å–æ–º'
        ];
        nextLevel = { name: '–ù–æ–≤–∏—á–æ–∫', need: 1 };
    }
    
    return { level, emoji, benefits, nextLevel, discount, bonusFrequency };
}

// –°–∏—Å—Ç–µ–º–∞ –ª–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∫–∏–¥–æ–∫
async function getUserDiscountInfo(chatId) {
    try {
        const usersCollection = db.collection('users');
        const user = await usersCollection.findOne({ chatId: chatId });
        const purchases = user ? user.purchases : 0;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–∫–∏–¥–∫–∞—Ö –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if (!user || !user.discountUsage) {
            const discountUsage = {
                active_3: 0,    // —Å–∫–∏–¥–∫–∞ 3% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ä–∞–∑
                active_5: 0,    // —Å–∫–∏–¥–∫–∞ 5% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ä–∞–∑  
                vip_7: 0,       // —Å–∫–∏–¥–∫–∞ 7% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ä–∞–∑
                legend_10: 0    // —Å–∫–∏–¥–∫–∞ 10% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ä–∞–∑
            };
            
            if (user) {
                await usersCollection.updateOne(
                    { chatId: chatId },
                    { $set: { discountUsage: discountUsage } }
                );
            }
            
            return discountUsage;
        }
        
        return user.discountUsage || {
            active_3: 0, active_5: 0, vip_7: 0, legend_10: 0
        };
        
    } catch (error) {
        console.error('‚ùå Error getting discount info:', error);
        return { active_3: 0, active_5: 0, vip_7: 0, legend_10: 0 };
    }
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–∏–¥–æ–∫
function getAvailableDiscounts(purchases, discountUsage) {
    const availableDiscounts = [];
    
    if (purchases >= 50) {
        // –õ–µ–≥–µ–Ω–¥–∞: 3 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∫–∏–¥–∫–∏ 10%
        if (discountUsage.legend_10 < 3) {
            availableDiscounts.push({
                discount: 10,
                remaining: 3 - discountUsage.legend_10,
                type: 'legend_10',
                label: 'üëë –°–∫–∏–¥–∫–∞ –õ–µ–≥–µ–Ω–¥—ã 10%'
            });
        }
    }
    
    if (purchases >= 20) {
        // VIP: 3 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∫–∏–¥–∫–∏ 7%
        if (discountUsage.vip_7 < 3) {
            availableDiscounts.push({
                discount: 7,
                remaining: 3 - discountUsage.vip_7,
                type: 'vip_7',
                label: 'üíé VIP —Å–∫–∏–¥–∫–∞ 7%'
            });
        }
    }
    
    if (purchases >= 10) {
        // –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç: 2 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∫–∏–¥–∫–∏ 5%
        if (discountUsage.active_5 < 2) {
            availableDiscounts.push({
                discount: 5,
                remaining: 2 - discountUsage.active_5,
                type: 'active_5',
                label: '‚≠ê –°–∫–∏–¥–∫–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ 5%'
            });
        }
    }
    
    if (purchases >= 5) {
        // –ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å: 1 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∫–∏–¥–∫–∏ 3%
        if (discountUsage.active_3 < 1) {
            availableDiscounts.push({
                discount: 3,
                remaining: 1 - discountUsage.active_3,
                type: 'active_3',
                label: 'üî• –°–∫–∏–¥–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è 3%'
            });
        }
    }
    
    return availableDiscounts;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã —Å –≤—ã–±–æ—Ä–æ–º —Å–∫–∏–¥–∫–∏
async function showPaymentMethodsWithDiscountChoice(chatId, orderData) {
    try {
        const usersCollection = db.collection('users');
        const user = await usersCollection.findOne({ chatId: chatId });
        const purchases = user ? user.purchases : 0;
        const discountUsage = await getUserDiscountInfo(chatId);
        
        const diamondsData = orderData.region === 'RU' ? diamondsDataRU : diamondsDataKG;
        const selectedItem = diamondsData[orderData.index];
        const currency = orderData.region === 'RU' ? '‚ÇΩ' : 'KGS';
        const loyaltyInfo = getLoyaltyInfo(purchases);
        const availableDiscounts = getAvailableDiscounts(purchases, discountUsage);
        
        let orderText = `üíé *–í–∞—à –∑–∞–∫–∞–∑*\n\n`;
        orderText += `*–¢–æ–≤–∞—Ä:* ${typeof selectedItem.amount === 'number' ? `${selectedItem.amount}üíé` : selectedItem.amount}\n`;
        orderText += `*–¶–µ–Ω–∞:* ${selectedItem.price} ${currency}\n`;
        orderText += `*–†–µ–≥–∏–æ–Ω:* ${orderData.region === 'KG' ? 'üá∞üá¨ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω' : 'üá∑üá∫ –†–æ—Å—Å–∏—è'}\n`;
        orderText += `${loyaltyInfo.emoji} *–£—Ä–æ–≤–µ–Ω—å:* ${loyaltyInfo.level}\n\n`;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–∏–¥–∫–∏
        if (availableDiscounts.length > 0) {
            orderText += `üéüÔ∏è *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–∏–¥–∫–∏:*\n`;
            availableDiscounts.forEach(discount => {
                const saved = Math.round(selectedItem.price * (discount.discount / 100));
                const finalPrice = selectedItem.price - saved;
                orderText += `‚Ä¢ ${discount.label} (-${saved} ${currency}) = *${finalPrice} ${currency}*\n`;
                orderText += `  –û—Å—Ç–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: ${discount.remaining}\n\n`;
            });
        }
        
        // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–∫–∏–¥–∫–∏ –∏–ª–∏ –±–µ–∑ —Å–∫–∏–¥–∫–∏
        let keyboard = [];
        
        // –ö–Ω–æ–ø–∫–∏ —Å–æ —Å–∫–∏–¥–∫–∞–º–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ)
        if (availableDiscounts.length > 0) {
            orderText += `–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:`;
            
            availableDiscounts.forEach(discount => {
                const saved = Math.round(selectedItem.price * (discount.discount / 100));
                keyboard.push([{
                    text: `üéüÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∫–∏–¥–∫—É ${discount.discount}% (-${saved} ${currency})`,
                    callback_data: `use_discount_${discount.type}_${orderData.index}`
                }]);
            });
            
            keyboard.push([{
                text: 'üí∞ –û–ø–ª–∞—Ç–∏—Ç—å –±–µ–∑ —Å–∫–∏–¥–∫–∏',
                callback_data: `no_discount_${orderData.index}`
            }]);
        } else {
            orderText += `–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:`;
            
            // –û–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã
            if (orderData.region === 'KG') {
                keyboard = [
                    [{ text: 'üí≥ O! –î–µ–Ω—å–≥–∏', callback_data: `pay_omoney_${orderData.index}` }],
                    [{ text: 'üí∞ Balance.kg', callback_data: `pay_balance_${orderData.index}` }],
                    [{ text: 'üè¶ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥', callback_data: `pay_transfer_${orderData.index}` }],
                ];
            } else {
                keyboard = [
                    [{ text: 'üè¶ –û–ø–ª–∞—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–º', callback_data: `pay_transfer_${orderData.index}` }],
                    [{ text: '‚Çø –û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π', callback_data: `pay_crypto_${orderData.index}` }],
                ];
            }
        }
        
        keyboard.push([{ text: 'üîô –ö –≤—ã–±–æ—Ä—É –∞–ª–º–∞–∑–æ–≤', callback_data: 'back_to_diamonds' }]);
        
        await bot.sendMessage(chatId, orderText, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: keyboard
            }
        });
        
    } catch (error) {
        console.error('‚ùå Error showing payment methods:', error);
        await showPaymentMethods(chatId, orderData);
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –æ–ø–ª–∞—Ç–µ
async function applyDiscountAndProceed(chatId, messageId, discountType, orderIndex) {
    try {
        const usersCollection = db.collection('users');
        const user = await usersCollection.findOne({ chatId: chatId });
        const purchases = user ? user.purchases : 0;
        const orderData = waitingForAction[chatId];
        
        if (!orderData) {
            await bot.sendMessage(chatId, '‚ùå –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –ø–æ—Ç–µ—Ä—è–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.');
            return;
        }
        
        const diamondsData = orderData.region === 'RU' ? diamondsDataRU : diamondsDataKG;
        const selectedItem = diamondsData[orderIndex];
        const currency = orderData.region === 'RU' ? '‚ÇΩ' : 'KGS';
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∫–∏–¥–∫—É
        let discount = 0;
        let updateField = '';
        
        switch(discountType) {
            case 'active_3':
                discount = 3;
                updateField = 'discountUsage.active_3';
                break;
            case 'active_5':
                discount = 5;
                updateField = 'discountUsage.active_5';
                break;
            case 'vip_7':
                discount = 7;
                updateField = 'discountUsage.vip_7';
                break;
            case 'legend_10':
                discount = 10;
                updateField = 'discountUsage.legend_10';
                break;
        }
        
        const saved = Math.round(selectedItem.price * (discount / 100));
        const finalPrice = selectedItem.price - saved;
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∫–∏–¥–∫–∏
        await usersCollection.updateOne(
            { chatId: chatId },
            { $inc: { [updateField]: 1 } },
            { upsert: true }
        );
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–∏–¥–∫–µ –≤ –∑–∞–∫–∞–∑–µ
        orderData.discountApplied = {
            type: discountType,
            percent: discount,
            saved: saved,
            originalPrice: selectedItem.price,
            finalPrice: finalPrice
        };
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã
        await showFinalPaymentMethods(chatId, messageId, orderData);
        
    } catch (error) {
        console.error('‚ùå Error applying discount:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
}

// –§–∏–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –æ–ø–ª–∞—Ç—ã —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω–æ–π —Å–∫–∏–¥–∫–æ–π
async function showFinalPaymentMethods(chatId, messageId, orderData) {
    const diamondsData = orderData.region === 'RU' ? diamondsDataRU : diamondsDataKG;
    const selectedItem = diamondsData[orderData.index];
    const currency = orderData.region === 'RU' ? '‚ÇΩ' : 'KGS';
    
    let orderText = `üíé *–§–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑*\n\n`;
    orderText += `*–¢–æ–≤–∞—Ä:* ${typeof selectedItem.amount === 'number' ? `${selectedItem.amount}üíé` : selectedItem.amount}\n`;
    
    if (orderData.discountApplied) {
        orderText += `*–¶–µ–Ω–∞:* ~${orderData.discountApplied.originalPrice}~ ‚ûú *${orderData.discountApplied.finalPrice} ${currency}*\n`;
        orderText += `üéüÔ∏è *–°–∫–∏–¥–∫–∞:* ${orderData.discountApplied.percent}% (-${orderData.discountApplied.saved} ${currency})\n\n`;
    } else {
        orderText += `*–¶–µ–Ω–∞:* ${selectedItem.price} ${currency}\n\n`;
    }
    
    orderText += `–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:`;
    
    let paymentButtons = [];
    
    if (orderData.region === 'KG') {
        paymentButtons = [
            [{ text: 'üí≥ O! –î–µ–Ω—å–≥–∏', callback_data: `pay_omoney_${orderData.index}` }],
            [{ text: 'üí∞ Balance.kg', callback_data: `pay_balance_${orderData.index}` }],
            [{ text: 'üè¶ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥', callback_data: `pay_transfer_${orderData.index}` }],
        ];
    } else {
        paymentButtons = [
            [{ text: 'üè¶ –û–ø–ª–∞—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–º', callback_data: `pay_transfer_${orderData.index}` }],
            [{ text: '‚Çø –û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π', callback_data: `pay_crypto_${orderData.index}` }],
        ];
    }
    
    paymentButtons.push([{ text: 'üîô –ö –≤—ã–±–æ—Ä—É –∞–ª–º–∞–∑–æ–≤', callback_data: 'back_to_diamonds' }]);
    
    await bot.editMessageText(orderText, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        reply_markup: {
            inline_keyboard: paymentButtons
        }
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å –ª–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–∫–∏–¥–∫–∞–º–∏
async function showPurchaseHistoryWithLimitedBenefits(chatId) {
    try {
        if (!db) {
            await bot.sendMessage(chatId, '‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            return;
        }
        
        const usersCollection = db.collection('users');
        const user = await usersCollection.findOne({ chatId: chatId });
        const purchases = user ? user.purchases : 0;
        const lastPurchase = user ? user.lastPurchase : null;
        const discountUsage = await getUserDiscountInfo(chatId);
        
        const loyaltyInfo = getLoyaltyInfo(purchases);
        const untilBonus = loyaltyInfo.bonusFrequency - (purchases % loyaltyInfo.bonusFrequency);
        const availableDiscounts = getAvailableDiscounts(purchases, discountUsage);
        
        let historyText = `${loyaltyInfo.emoji} *${loyaltyInfo.level.toUpperCase()}*\n\n`;
        historyText += `üë§ *–ü–æ–∫—É–ø–∫–∏:* ${purchases}\n`;
        
        if (purchases === 0) {
            historyText += `üéØ *–°—Ç–∞—Ç—É—Å:* –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n`;
        } else {
            const bonusesReceived = Math.floor(purchases / loyaltyInfo.bonusFrequency);
            historyText += `üéÅ *–ë–æ–Ω—É—Å–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ:* ${bonusesReceived}\n`;
            
            if (untilBonus === loyaltyInfo.bonusFrequency) {
                historyText += `‚ú® *–°–ª–µ–¥—É—é—â–∞—è –ø–æ–∫—É–ø–∫–∞ = –ë–û–ù–£–°!* üéâ\n`;
            } else {
                historyText += `‚è≥ *–î–æ –±–æ–Ω—É—Å–∞:* ${untilBonus} –ø–æ–∫—É–ø–æ–∫\n`;
            }
            
            if (lastPurchase) {
                historyText += `üìÖ *–ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–∫—É–ø–∫–∞:* ${lastPurchase.toLocaleDateString('ru-RU')}\n`;
            }
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —É—Ä–æ–≤–Ω—è
        historyText += `\nüèÜ *–í–ê–®–ò –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:*\n`;
        loyaltyInfo.benefits.forEach(benefit => {
            historyText += `${benefit}\n`;
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–∏–¥–∫–∏
        if (availableDiscounts.length > 0) {
            historyText += `\nüéüÔ∏è *–î–û–°–¢–£–ü–ù–´–ï –°–ö–ò–î–ö–ò:*\n`;
            availableDiscounts.forEach(discount => {
                historyText += `${discount.label}: ${discount.remaining} —Ä–∞–∑\n`;
            });
        } else if (purchases >= 5) {
            historyText += `\nüéüÔ∏è *–í—Å–µ —Å–∫–∏–¥–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã* ‚ú®`;
        }
        
        // –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
        if (loyaltyInfo.nextLevel) {
            historyText += `\n\nüéØ *–î–æ —É—Ä–æ–≤–Ω—è "${loyaltyInfo.nextLevel.name}":* ${loyaltyInfo.nextLevel.need} –ø–æ–∫—É–ø–æ–∫`;
        } else {
            historyText += `\n\nüëë *–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!*`;
        }
        
        let keyboard = [
            [{ text: 'üíé –ö—É–ø–∏—Ç—å –∞–ª–º–∞–∑—ã', callback_data: 'buy_diamonds' }],
            [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_start' }]
        ];
        
        await bot.sendMessage(chatId, historyText, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: keyboard
            }
        });
    } catch (error) {
        console.error('‚ùå Error showing purchase history:', error);
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫.');
    }
}

// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π callback handler:
/*
} else if (q.data.startsWith('use_discount_')) {
    const parts = q.data.split('_');
    const discountType = parts[2] + '_' + parts[3]; // –Ω–∞–ø—Ä–∏–º–µ—Ä "legend_10"
    const orderIndex = parts[4];
    await applyDiscountAndProceed(chatId, messageId, discountType, orderIndex);
    
} else if (q.data.startsWith('no_discount_')) {
    const orderIndex = q.data.split('_')[2];
    await showFinalPaymentMethods(chatId, messageId, waitingForAction[chatId]);
*/