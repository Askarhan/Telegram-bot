const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const { MongoClient } = require('mongodb');

const app = express();
app.use(express.json());

const PORT = process.env.PORT;
const TOKEN = process.env.TOKEN || '8370855958:AAHC8ry_PsUqso_jC2sAS9CnQnfURk1UW3w';
const MONGO_URI = process.env.MONGO_URI;

const bot = new TelegramBot(TOKEN);
const client = new MongoClient(MONGO_URI);

const adminChatId = 895583535;

const waitingForAction = {};
let selectedRegion = 'RU';
let db;

async function connectToDb() {
    try {
        await client.connect();
        db = client.db('bot_db');
        console.log("Connected to MongoDB");
    } catch (e) {
        console.error("Failed to connect to MongoDB", e);
    }
}

connectToDb();

const diamondsDataRU = [
    { amount: 56, price: 124 },
    { amount: 86, price: 152 },
    { amount: 172, price: 280 },
    { amount: 257, price: 411 },
    { amount: 706, price: 1224 },
    { amount: 2195, price: 3105 },
    { amount: 3688, price: 4292 },
    { amount: 5532, price: 6342 },
    { amount: 9288, price: 10700 }
];

const diamondsDataKG = [
    { amount: '–ê–ª–º–∞–∑–Ω—ã–π –ø—Ä–æ–ø—É—Å–∫ (w)', price: 181 },
    { amount: '–°—É–º–µ—Ä–µ—á–Ω—ã–π –ø—Ä–æ–ø—É—Å–∫', price: 715 },
    { amount: 56, price: 104 },
    { amount: 86, price: 127 },
    { amount: 172, price: 234 },
    { amount: 257, price: 343 },
    { amount: 706, price: 874 },
    { amount: 2195, price: 2588 },
    { amount: 3688, price: 4292 },
    { amount: 5532, price: 6342 },
    { amount: 9288, price: 10700 }
];

app.get('/', (req, res) => {
    res.send('–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!');
});

app.post('/webhook', (req, res) => {
    try {
        bot.processUpdate(req.body);
    } catch (e) {
        console.error('processUpdate error:', e);
    }
    res.sendStatus(200);
});

bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    showMainMenu(chatId);
});

bot.onText(/\/mybonus/, async (msg) => {
    const chatId = msg.chat.id;
    if (!db) {
        await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞.');
        return;
    }
    const usersCollection = db.collection('users');
    const user = await usersCollection.findOne({ chatId: chatId });
    const purchases = user ? user.purchases : 0;
    const untilBonus = 5 - (purchases % 5);

    if (purchases === 0) {
        await bot.sendMessage(chatId, `–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫. –°–æ–≤–µ—Ä—à–∏—Ç–µ 5 –ø–æ–∫—É–ø–æ–∫, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å!`);
    } else {
        await bot.sendMessage(chatId, `–í—ã —Å–æ–≤–µ—Ä—à–∏–ª–∏ ${purchases} –ø–æ–∫—É–ø–æ–∫. –û—Å—Ç–∞–ª–æ—Å—å ${untilBonus} –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞!`);
    }
});

bot.on('message', async (msg) => {
    const chatId = msg.chat.id;

    if (waitingForAction[chatId]) {
        if (waitingForAction[chatId].step === 'playerId') {
            const playerId = msg.text;
            const orderData = waitingForAction[chatId];
            const diamondsData = orderData.region === 'RU' ? diamondsDataRU : diamondsDataKG;
            const selectedItem = diamondsData[orderData.index];
            const currency = orderData.region === 'RU' ? '‚ÇΩ' : 'KGS';

            const adminMessage =
                `üì¢ **–ù–û–í–´–ô –ó–ê–ö–ê–ó**\n\n` +
                `**–¢–æ–≤–∞—Ä:** ${typeof selectedItem.amount === 'number' ? `${selectedItem.amount}üíé` : selectedItem.amount}\n` +
                `**–°—É–º–º–∞:** ${selectedItem.price} ${currency}\n` +
                `**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** ${msg.from.username ? `@${msg.from.username}` : msg.from.first_name}\n` +
                `**ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:** ${msg.from.id}\n` +
                `**ID –∏–≥—Ä–æ–∫–∞ MLBB:** ${playerId}`;
            
            await bot.sendMessage(adminChatId, adminMessage, { parse_mode: 'Markdown' });

            const userMessageText =
                `–ö –æ–ø–ª–∞—Ç–µ ${selectedItem.price} ${currency}.\n\n` +
                `**–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞:**\n` +
                `[–í–ê–®–ò –†–ï–ö–í–ò–ó–ò–¢–´]\n\n` +
                `*–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ "–Ø –æ–ø–ª–∞—Ç–∏–ª ‚úÖ".*`;
            
            await bot.sendMessage(
                chatId,
                userMessageText,
                {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '–Ø –æ–ø–ª–∞—Ç–∏–ª ‚úÖ', callback_data: `paid` }],
                            [{ text: '–ù–∞–∑–∞–¥', callback_data: 'back_to_regions' }]
                        ]
                    }
                }
            );

            delete waitingForAction[chatId];
        } else if (waitingForAction[chatId].step === 'screenshot' && msg.photo) {
            const photoId = msg.photo[msg.photo.length - 1].file_id;
            const userId = msg.from.id;
            const userFirstName = msg.from.first_name;

            const adminMessage =
                `‚ùóÔ∏è **–û–ñ–ò–î–ê–ï–¢ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø**\n\n` +
                `**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** ${userFirstName}\n` +
                `**ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:** ${userId}\n` +
                `**–î–µ–π—Å—Ç–≤–∏–µ:** –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É –ø–æ —Å–∫—Ä–∏–Ω—à–æ—Ç—É.`

            await bot.sendPhoto(adminChatId, photoId, {
                caption: adminMessage,
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data: `confirm_payment_${userId}` },
                            { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data: `decline_payment_${userId}` }
                        ]
                    ]
                }
            });

            await bot.sendMessage(
                chatId,
                '–°–ø–∞—Å–∏–±–æ! –í–∞—à —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.'
            );

            waitingForAction[chatId] = { step: 'waiting_for_admin_approval' };
        }
    }
});

bot.on('callback_query', async (q) => {
    const chatId = q.message.chat.id;
    const messageId = q.message.message_id;

    try {
        if (q.data.startsWith('confirm_payment_')) {
            const userId = parseInt(q.data.split('_')[2]);
            const usersCollection = db.collection('users');
            
            const user = await usersCollection.findOne({ chatId: userId });
            let purchases = user ? user.purchases : 0;
            purchases++;

            await usersCollection.updateOne(
                { chatId: userId },
                { $set: { purchases: purchases, lastPurchase: new Date() } },
                { upsert: true }
            );

            await bot.sendMessage(userId, '‚úÖ **–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!** –ú—ã –ø–æ–ø–æ–ª–Ω–∏–º –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!', { parse_mode: 'Markdown' });
            
            if (purchases % 5 === 0) {
                await bot.sendMessage(userId, `üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!** üéâ –í—ã —Å–æ–≤–µ—Ä—à–∏–ª–∏ ${purchases} –ø–æ–∫—É–ø–æ–∫ –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ –±–æ–Ω—É—Å ‚Äî **50 –±–æ–Ω—É—Å–Ω—ã—Ö –∞–ª–º–∞–∑–æ–≤!**`, { parse_mode: 'Markdown' });
            }
            
            await bot.editMessageText(`‚úÖ **–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.**\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${q.from.username || q.from.first_name}\n\n–°—á—ë—Ç—á–∏–∫ –ø–æ–∫—É–ø–æ–∫ –æ–±–Ω–æ–≤–ª—ë–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.`, {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'Markdown'
            });
            delete waitingForAction[userId];


        } else if (q.data.startsWith('decline_payment_')) {
            const userId = parseInt(q.data.split('_')[2]);

            const userMessageText =
                `‚ùå **–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞.**` +
                `\n\n–£–±–µ–¥–∏—Ç–µ—Å—å –≤ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.` +
                `\n–ï—Å–ª–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –∏ –≤—ã –ø–µ—Ä–µ–≤–µ–ª–∏ –¥–µ–Ω—å–≥–∏ –ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ä–µ–∫–≤–∏–∑–∏—Ç—É, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:`;
            
            await bot.sendMessage(userId, userMessageText, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞', callback_data: `resend_screenshot_${userId}` }]
                    ]
                }
            });
            
            await bot.editMessageText(`‚ùå **–û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.**\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${q.from.username || q.from.first_name}`, {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'Markdown'
            });
            delete waitingForAction[userId];

        } else if (q.data.startsWith('resend_screenshot_')) {
            const userId = parseInt(q.data.split('_')[2]);

            if (waitingForAction[userId] && waitingForAction[userId].step === 'waiting_for_admin_approval') {
                await bot.sendMessage(userId, '–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –≤–∞—à –ø–ª–∞—Ç–µ–∂ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è.', { parse_mode: 'Markdown' });
            } else {
                await bot.sendMessage(userId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, **–ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç** –≤–∞—à–µ–π –æ–ø–ª–∞—Ç—ã –µ—â—ë —Ä–∞–∑.');
                waitingForAction[userId] = { step: 'screenshot' };
            }
        } else if (q.data === 'buy_diamonds') {
            await editToRegionMenu(chatId, messageId);
        } else if (q.data === 'region_ru') {
            selectedRegion = 'RU';
            await editToDiamondsMenu(chatId, messageId);
        } else if (q.data === 'region_kg') {
            selectedRegion = 'KG';
            await editToDiamondsMenu(chatId, messageId);
        } else if (q.data === 'reviews') {
            await bot.sendMessage(chatId, '–û—Ç–∑—ã–≤—ã –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: https://t.me/–¢–í–û–ô_–ö–ê–ù–ê–õ');
        } else if (q.data === 'leave_review') {
            await bot.sendMessage(chatId, '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤: @–¢–í–û–ô_–ù–ò–ö');
        } else if (q.data === 'back_to_start') {
            await editToMainMenu(chatId, messageId);
        } else if (q.data === 'back_to_regions') {
            await editToRegionMenu(chatId, messageId);
        } else if (q.data.startsWith('diamond_')) {
            const selectedItemIndex = q.data.split('_')[1];
            const diamondsData = selectedRegion === 'RU' ? diamondsDataRU : diamondsDataKG;
            const selectedItem = diamondsData[selectedItemIndex];

            waitingForAction[chatId] = {
                step: 'playerId',
                index: selectedItemIndex,
                region: selectedRegion,
                item: selectedItem
            };

            await bot.sendMessage(chatId, `–í—ã –≤—ã–±—Ä–∞–ª–∏ **${typeof selectedItem.amount === 'number' ? `${selectedItem.amount}üíé` : selectedItem.amount}** –∑–∞ **${selectedItem.price}** ${selectedRegion === 'RU' ? '‚ÇΩ' : 'KGS'}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ ID —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ MLBB:`, { parse_mode: 'Markdown' });
        } else if (q.data === 'paid') {
            const userFirstName = q.from.first_name;
            await bot.sendMessage(chatId, `–°–ø–∞—Å–∏–±–æ, ${userFirstName}! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, **–ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç** –≤–∞—à–µ–π –æ–ø–ª–∞—Ç—ã.`);
            waitingForAction[chatId] = { step: 'screenshot' };
        }
        await bot.answerCallbackQuery(q.id);
    } catch (e) {
        console.error('callback error:', e);
    }
});

async function showMainMenu(chatId) {
    await bot.sendMessage(chatId, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: '–ö—É–ø–∏—Ç—å –∞–ª–º–∞–∑—ã üíé', callback_data: 'buy_diamonds' },
                    { text: '–û—Ç–∑—ã–≤—ã üíñ', callback_data: 'reviews' }
                ],
                [{ text: '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ üíå', callback_data: 'leave_review' }]
            ]
        }
    });
}

async function editToRegionMenu(chatId, messageId) {
    await bot.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:', {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
            inline_keyboard: [
                [
                    { text: 'üá∑üá∫ RU', callback_data: 'region_ru' },
                    { text: 'üá∞üá¨ KG', callback_data: 'region_kg' }
                ],
                [{ text: '–ù–∞–∑–∞–¥ üîô', callback_data: 'back_to_start' }]
            ],
        },
    });
}

async function editToDiamondsMenu(chatId, messageId) {
    const currency = selectedRegion === 'RU' ? '‚ÇΩ' : 'KGS';
    const diamondsData = selectedRegion === 'RU' ? diamondsDataRU : diamondsDataKG;
    const keyboard = [];
    let currentRow = [];

    diamondsData.forEach((d, index) => {
        const amountText = typeof d.amount === 'number' ? `${d.amount}üíé` : d.amount;
        
        currentRow.push({
            text: `${amountText} ‚Äî ${d.price.toLocaleString('ru-RU')} ${currency}`,
            callback_data: `diamond_${index}`
        });

        if (currentRow.length === 2 || index === diamondsData.length - 1) {
            keyboard.push(currentRow);
            currentRow = [];
        }
    });

    keyboard.push([{ text: '–ù–∞–∑–∞–¥ üîô', callback_data: 'back_to_regions' }]);

    await bot.editMessageText(`–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –∞–ª–º–∞–∑–æ–≤ (—Å–µ–π—á–∞—Å –≤—ã–±—Ä–∞–Ω —Ä–µ–≥–∏–æ–Ω: ${selectedRegion}):`, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: { inline_keyboard: keyboard },
    });
}

async function editToMainMenu(chatId, messageId) {
    await bot.editMessageText('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
            inline_keyboard: [
                [
                    { text: '–ö—É–ø–∏—Ç—å –∞–ª–º–∞–∑—ã üíé', callback_data: 'buy_diamonds' },
                    { text: '–û—Ç–∑—ã–≤—ã üíñ', callback_data: 'reviews' }
                ],
                [{ text: '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ üíå', callback_data: 'leave_review' }]
            ]
        }
    });
}

app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
});
