// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
const logger = require('../utils/logger');
const Validators = require('../utils/validators');
const { LIMITS } = require('../config/constants');

class BotHandlers {
    constructor(bot, db, referralService, promoService, adminChatId) {
        this.bot = bot;
        this.db = db;
        this.referralService = referralService;
        this.promoService = promoService;
        this.adminChatId = adminChatId;
        this.waitingForAction = {};
    }

    // –ö–æ–º–∞–Ω–¥–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫
    async handleHistory(msg) {
        const chatId = msg.chat.id;
        await this.showPurchaseHistory(chatId);
    }

    // –ö–æ–º–∞–Ω–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ–Ω—É—Å–∞—Ö
    async handleMyBonus(msg) {
        const chatId = msg.chat.id;

        try {
            const usersCollection = this.db.collection('users');
            const user = await usersCollection.findOne({ chatId: chatId });
            const purchases = user ? user.purchases : 0;
            const untilBonus = 5 - (purchases % 5);

            if (purchases === 0) {
                await this.bot.sendMessage(chatId, `–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫. –°–æ–≤–µ—Ä—à–∏—Ç–µ 5 –ø–æ–∫—É–ø–æ–∫, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å!`);
            } else {
                await this.bot.sendMessage(chatId, `–í—ã —Å–æ–≤–µ—Ä—à–∏–ª–∏ ${purchases} –ø–æ–∫—É–ø–æ–∫. –û—Å—Ç–∞–ª–æ—Å—å ${untilBonus} –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞!`);
            }

            logger.userAction(chatId, 'bonus_info_viewed', { purchases, untilBonus });

        } catch (error) {
            logger.error('Database error in handleMyBonus', error);
            await this.bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.');
        }
    }

    // –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    async handleStats(msg) {
        const chatId = msg.chat.id;

        if (chatId !== this.adminChatId) {
            await this.bot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.');
            return;
        }

        try {
            const usersCollection = this.db.collection('users');
            const ordersCollection = this.db.collection('orders');

            const totalUsers = await usersCollection.countDocuments();
            const totalOrders = await ordersCollection.countDocuments();
            const totalPurchases = await usersCollection.aggregate([
                { $group: { _id: null, total: { $sum: '$purchases' } } }
            ]).toArray();

            const yesterday = new Date();
            yesterday.setDate(yesterday.getDate() - 1);

            const newUsersToday = await usersCollection.countDocuments({
                lastPurchase: { $gte: yesterday }
            });

            const ordersToday = await ordersCollection.countDocuments({
                created_at: { $gte: yesterday }
            });

            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º
            const referralStats = await this.db.collection('referrals').aggregate([
                {
                    $group: {
                        _id: null,
                        totalReferrals: { $sum: 1 },
                        totalBonuses: { $sum: '$bonusAwarded' }
                    }
                }
            ]).toArray();

            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º
            const promoStats = await this.promoService.getPromoStats(this.adminChatId);

            const topUsers = await usersCollection.find()
                .sort({ purchases: -1 })
                .limit(5)
                .toArray();

            let statsText = `üìä *–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê v2.0*\n\n`;
            statsText += `üë• *–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* ${totalUsers}\n`;
            statsText += `üì¶ *–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤:* ${totalOrders}\n`;
            statsText += `üíé *–í—Å–µ–≥–æ –ø–æ–∫—É–ø–æ–∫:* ${totalPurchases[0]?.total || 0}\n\n`;

            statsText += `üìÖ *–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:*\n`;
            statsText += `üë• –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${newUsersToday}\n`;
            statsText += `üì¶ –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã: ${ordersToday}\n\n`;

            if (referralStats[0]) {
                statsText += `üë• *–†–ï–§–ï–†–ê–õ–´:*\n`;
                statsText += `‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–π: ${referralStats[0].totalReferrals}\n`;
                statsText += `‚Ä¢ –í—ã–ø–ª–∞—á–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤: ${referralStats[0].totalBonuses}\n\n`;
            }

            if (promoStats) {
                statsText += `üé´ *–ü–†–û–ú–û–ö–û–î–´:*\n`;
                statsText += `‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${promoStats.activePromos}/${promoStats.totalPromos}\n`;
                statsText += `‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: ${promoStats.totalUses}\n`;
                statsText += `‚Ä¢ –°–∫–∏–¥–æ–∫ –¥–∞–Ω–æ: ${promoStats.totalDiscount}\n\n`;
            }

            statsText += `üèÜ *–¢–û–ü –ö–õ–ò–ï–ù–¢–´:*\n`;
            topUsers.forEach((user, index) => {
                const loyaltyEmoji = user.purchases >= 20 ? 'üíé' : user.purchases >= 10 ? '‚≠ê' : 'üî•';
                statsText += `${index + 1}. ${loyaltyEmoji} ${user.purchases} –ø–æ–∫—É–ø–æ–∫\n`;
            });

            await this.bot.sendMessage(chatId, statsText, { parse_mode: 'Markdown' });

            logger.userAction(chatId, 'admin_stats_viewed');

        } catch (error) {
            logger.error('Error getting stats', error);
            await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
        }
    }

    // –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
    async handleCreatePromo(msg) {
        const chatId = msg.chat.id;

        if (chatId !== this.adminChatId) {
            await this.bot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.');
            return;
        }

        const text = msg.text.split(' ').slice(1).join(' ');
        if (!text) {
            await this.bot.sendMessage(chatId,
                `üìù *–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞*\n\n` +
                `–§–æ—Ä–º–∞—Ç: \`/createpromo –ö–û–î –°–ö–ò–î–ö–ê –û–ü–ò–°–ê–ù–ò–ï\`\n\n` +
                `–ü—Ä–∏–º–µ—Ä—ã:\n` +
                `\`/createpromo SALE10 10 –°–∫–∏–¥–∫–∞ 10%\`\n` +
                `\`/createpromo –ù–û–í–´–ô 15 –î–ª—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤\``,
                { parse_mode: 'Markdown' }
            );
            return;
        }

        const parts = text.split(' ');
        const code = parts[0];
        const discount = parseInt(parts[1]);
        const description = parts.slice(2).join(' ');

        if (!code || !discount || discount < 1 || discount > 50) {
            await this.bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –°–∫–∏–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 50%');
            return;
        }

        try {
            const result = await this.promoService.createPromo(chatId, {
                code,
                discount,
                description,
                maxUses: 100
            });

            if (result.success) {
                await this.bot.sendMessage(chatId,
                    `‚úÖ *–ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω!*\n\n` +
                    `üé´ –ö–æ–¥: \`${result.promo.code}\`\n` +
                    `üí∞ –°–∫–∏–¥–∫–∞: ${result.promo.discount}%\n` +
                    `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${result.promo.description}\n` +
                    `üî¢ –ú–∞–∫—Å. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: ${result.promo.maxUses}`,
                    { parse_mode: 'Markdown' }
                );

                logger.info('Promo created by admin', { code, discount, adminId: chatId });
            } else {
                await this.bot.sendMessage(chatId, `‚ùå ${result.error}`);
            }

        } catch (error) {
            logger.error('Error creating promo via command', error);
            await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞');
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    async handleMessage(msg) {
        const chatId = msg.chat.id;
        const isBotCommand = msg.text && msg.text.startsWith('/');

        if (this.waitingForAction[chatId] && !isBotCommand) {
            await this.processUserInput(msg);
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
    async processUserInput(msg) {
        const chatId = msg.chat.id;
        const action = this.waitingForAction[chatId];

        try {
            if (action.step === 'playerId') {
                await this.processPlayerIdInput(msg);
            } else if (action.step === 'promoCode') {
                await this.processPromoCodeInput(msg);
            } else if (['transfer_confirm', 'omoney_confirm', 'balance_confirm'].includes(action.step)) {
                await this.processPaymentConfirmation(msg);
            }
        } catch (error) {
            logger.error('Error processing user input', error);
            await this.bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –∏–≥—Ä–æ–∫–∞
    async processPlayerIdInput(msg) {
        const chatId = msg.chat.id;
        const validation = Validators.validatePlayerId(msg.text);

        if (!validation.valid) {
            await this.bot.sendMessage(chatId, `‚ùå ${validation.error}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:`);
            return;
        }

        this.waitingForAction[chatId].playerId = validation.cleanId;
        this.waitingForAction[chatId].step = 'promoCode';

        await this.bot.sendMessage(chatId,
            `‚úÖ ID –∏–≥—Ä–æ–∫–∞: \`${validation.cleanId}\`\n\n` +
            `üé´ *–ï—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥?*\n` +
            `–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"`,
            {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_promo' }]
                    ]
                }
            }
        );

        logger.userAction(chatId, 'player_id_entered', { playerId: validation.cleanId });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    async processPromoCodeInput(msg) {
        const chatId = msg.chat.id;
        const orderData = this.waitingForAction[chatId];

        const validation = Validators.validatePromoCode(msg.text);
        if (!validation.valid) {
            await this.bot.sendMessage(chatId, `‚ùå ${validation.error}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"`);
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞
        const diamondsData = orderData.region === 'RU' ? require('../config/constants').DIAMONDS_DATA_RU : require('../config/constants').DIAMONDS_DATA_KG;
        const selectedItem = diamondsData[orderData.index];

        const promoResult = await this.promoService.applyPromo(chatId, validation.cleanCode, selectedItem.price);

        if (promoResult.success) {
            this.waitingForAction[chatId].promoCode = validation.cleanCode;
            this.waitingForAction[chatId].discount = promoResult.discount;
            this.waitingForAction[chatId].finalPrice = promoResult.newAmount;

            await this.bot.sendMessage(chatId,
                `üéâ *–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω!*\n\n` +
                `üé´ –ö–æ–¥: \`${validation.cleanCode}\`\n` +
                `üí∞ –°–∫–∏–¥–∫–∞: ${promoResult.discount}\n` +
                `üí≥ –ö –æ–ø–ª–∞—Ç–µ: ${promoResult.newAmount}`,
                { parse_mode: 'Markdown' }
            );

            logger.userAction(chatId, 'promo_applied', {
                promoCode: validation.cleanCode,
                discount: promoResult.discount
            });
        } else {
            await this.bot.sendMessage(chatId, `‚ùå ${promoResult.error}\n\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –ø—Ä–æ–º–æ–∫–æ–¥–∞?`, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data: 'skip_promo' },
                            { text: 'üîÑ –î—Ä—É–≥–æ–π –∫–æ–¥', callback_data: 'retry_promo' }
                        ]
                    ]
                }
            });
            return;
        }

        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
        this.waitingForAction[chatId].step = 'paymentChoice';
        await this.showPaymentMethods(chatId, this.waitingForAction[chatId]);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ (—Å–∫—Ä–∏–Ω—à–æ—Ç—ã)
    async processPaymentConfirmation(msg) {
        const chatId = msg.chat.id;
        const orderData = this.waitingForAction[chatId];

        if (!msg.photo) {
            await this.bot.sendMessage(chatId,
                'üì∑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ *—Å–∫—Ä–∏–Ω—à–æ—Ç* (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ), –∞ –Ω–µ –¥—Ä—É–≥–æ–π —Ç–∏–ø —Ñ–∞–π–ª–∞.\n\n–ù–∞–º –Ω—É–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã! üßæ',
                { parse_mode: 'Markdown' }
            );
            return;
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞
        let paymentType = '–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥';
        if (orderData.step === 'omoney_confirm') {
            paymentType = 'O! –î–µ–Ω—å–≥–∏';
        } else if (orderData.step === 'balance_confirm') {
            paymentType = 'Balance.kg';
        }

        await this.sendPaymentToAdmin(msg, orderData, paymentType);

        let confirmMessage = '‚úÖ *–í–∞—à —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.*\n\n';
        if (paymentType === 'O! –î–µ–Ω—å–≥–∏') {
            confirmMessage += 'üì± –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ O! –î–µ–Ω—å–≥–∏...';
        } else if (paymentType === 'Balance.kg') {
            confirmMessage += 'üí∞ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ Balance.kg...';
        } else {
            confirmMessage += 'üè¶ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥...';
        }
        confirmMessage += '\n\n–ú—ã —Å–æ–æ–±—â–∏–º –≤–∞–º, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! ‚è±Ô∏è';

        await this.bot.sendMessage(chatId, confirmMessage, { parse_mode: 'Markdown' });

        delete this.waitingForAction[chatId];
        logger.userAction(chatId, 'payment_screenshot_sent', { paymentType });
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–µ –∞–¥–º–∏–Ω—É
    async sendPaymentToAdmin(msg, orderData, paymentType) {
        const diamondsData = orderData.region === 'RU' ? require('../config/constants').DIAMONDS_DATA_RU : require('../config/constants').DIAMONDS_DATA_KG;
        const selectedItem = diamondsData[orderData.index];
        const currency = orderData.region === 'RU' ? '‚ÇΩ' : 'KGS';
        const finalPrice = orderData.finalPrice || selectedItem.price;

        const userUsername = msg.from.username;
        const userFirstName = msg.from.first_name;

        let adminMessage =
            `üì¢ *–ù–û–í–´–ô –ó–ê–ö–ê–ó (${paymentType})*\n\n` +
            `*–¢–æ–≤–∞—Ä:* ${typeof selectedItem.amount === 'number' ? `${selectedItem.amount}üíé` : selectedItem.amount}\n` +
            `*–°—É–º–º–∞:* ${finalPrice} ${currency}\n` +
            `*–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:* ${paymentType}\n` +
            `*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* ${userUsername ? `@${userUsername}` : userFirstName}\n` +
            `*ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:* ${msg.from.id}\n` +
            `*ID –∏–≥—Ä–æ–∫–∞ MLBB:* ${orderData.playerId}\n` +
            `*–†–µ–≥–∏–æ–Ω:* ${orderData.region}`;

        if (orderData.promoCode) {
            adminMessage += `\n*–ü—Ä–æ–º–æ–∫–æ–¥:* ${orderData.promoCode} (-${orderData.discount})`;
        }

        adminMessage += `\n*–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: —Å–∫—Ä–∏–Ω—à–æ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.*`;

        await this.bot.sendPhoto(this.adminChatId, msg.photo[msg.photo.length - 1].file_id, {
            caption: adminMessage,
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: `confirm_payment_${msg.from.id}` }],
                    [{ text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `decline_payment_${msg.from.id}` }]
                ]
            }
        });
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
    async showPaymentMethods(chatId, orderData) {
        const diamondsData = orderData.region === 'RU' ? require('../config/constants').DIAMONDS_DATA_RU : require('../config/constants').DIAMONDS_DATA_KG;
        const selectedItem = diamondsData[orderData.index];
        const currency = orderData.region === 'RU' ? '‚ÇΩ' : 'KGS';
        const finalPrice = orderData.finalPrice || selectedItem.price;

        let paymentButtons = [];

        if (orderData.region === 'KG') {
            paymentButtons = [
                [{ text: 'üí≥ O! –î–µ–Ω—å–≥–∏', callback_data: `pay_omoney_${orderData.index}` }],
                [{ text: 'üí∞ Balance.kg', callback_data: `pay_balance_${orderData.index}` }],
                [{ text: 'üè¶ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥', callback_data: `pay_transfer_${orderData.index}` }],
                [{ text: 'üîô –ö –≤—ã–±–æ—Ä—É –∞–ª–º–∞–∑–æ–≤', callback_data: 'back_to_diamonds' }]
            ];
        } else {
            paymentButtons = [
                [{ text: 'üè¶ –û–ø–ª–∞—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–º', callback_data: `pay_transfer_${orderData.index}` }],
                [{ text: '‚Çø –û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π', callback_data: `pay_crypto_${orderData.index}` }],
                [{ text: 'üîô –ö –≤—ã–±–æ—Ä—É –∞–ª–º–∞–∑–æ–≤', callback_data: 'back_to_diamonds' }]
            ];
        }

        let orderText = `üíé *–í–∞—à –∑–∞–∫–∞–∑*\n\n` +
            `*–¢–æ–≤–∞—Ä:* ${typeof selectedItem.amount === 'number' ? `${selectedItem.amount}üíé` : selectedItem.amount}\n` +
            `*–†–µ–≥–∏–æ–Ω:* ${orderData.region === 'KG' ? 'üá∞üá¨ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω' : 'üá∑üá∫ –†–æ—Å—Å–∏—è'}\n`;

        if (orderData.promoCode) {
            orderText += `*–ü—Ä–æ–º–æ–∫–æ–¥:* ${orderData.promoCode}\n` +
                `*–°–∫–∏–¥–∫–∞:* -${orderData.discount} ${currency}\n` +
                `*~~–¶–µ–Ω–∞:~~ ${selectedItem.price} ${currency}*\n` +
                `*–ö –æ–ø–ª–∞—Ç–µ:* ${finalPrice} ${currency}\n\n`;
        } else {
            orderText += `*–°—Ç–æ–∏–º–æ—Å—Ç—å:* ${selectedItem.price} ${currency}\n\n`;
        }

        orderText += `–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:`;

        await this.bot.sendMessage(chatId, orderText, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: paymentButtons
            }
        });
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫—É–ø–æ–∫ —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏
    async showPurchaseHistory(chatId) {
        try {
            const usersCollection = this.db.collection('users');
            const user = await usersCollection.findOne({ chatId: chatId });
            const purchases = user ? user.purchases : 0;
            const totalSpent = user ? user.totalSpent : 0;
            const lastPurchase = user ? user.lastPurchase : null;
            const untilBonus = 5 - (purchases % 5);

            // –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            const referralStats = await this.referralService.getReferralStats(chatId);

            let historyText = `üìä *–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫*\n\n`;
            historyText += `üë§ *–í–∞—à–∏ –ø–æ–∫—É–ø–∫–∏:* ${purchases}\n`;
            historyText += `üí∞ *–ü–æ—Ç—Ä–∞—á–µ–Ω–æ:* ${totalSpent.toFixed(2)}\n`;

            if (referralStats) {
                historyText += `üíé *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã:* ${referralStats.currentBonus}\n`;
            }

            // ... –æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫

            await this.bot.sendMessage(chatId, historyText, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üíé –ö—É–ø–∏—Ç—å –∞–ª–º–∞–∑—ã', callback_data: 'buy_diamonds' }],
                        [{ text: 'üë• –†–µ—Ñ–µ—Ä–∞–ª—ã', callback_data: 'referral_menu' }],
                        [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_start' }]
                    ]
                }
            });

            logger.userAction(chatId, 'purchase_history_viewed');

        } catch (error) {
            logger.error('Error showing purchase history', error);
            await this.bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫.');
        }
    }
}

module.exports = BotHandlers;